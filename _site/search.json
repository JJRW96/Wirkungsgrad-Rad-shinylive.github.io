[
  {
    "objectID": "VO2.html",
    "href": "VO2.html",
    "title": "VO2-Modellfunktion während der Belastung",
    "section": "",
    "text": "1 Modellfunktion des Sauerstoffvolumenstroms in Abhängigkeit von der Zeit während der Belastung in Shiny\n#| standalone: true\n#| viewerHeight: 900\n\nlibrary(shiny)\nlibrary(plotly)\nlibrary(minpack.lm)\n\n# Beispieldaten\nt_data &lt;- c(0, 2.8, 5.3, 8.6, 10.4, 15.2, 19.7, 22.5, 24.5, 26.2, 28.2, 31.6, 33.5, 35.3, 37, 38.5, 40.3, 41.9, 43.5, 45.2, 46.8, 48.4, 50, 51.5, 53.3, 54.8, 56.5, 57.9, 59.5, 61.1, 62.9, 64.3, 65.8, 67.7, 69.1, 70.7, 72.4, 73.9, 75.7, 77.2, 78.9, 80.5, 82.7, 84.1, 85.5, 87, 88.6, 90.2, 91.5, 92.9, 94.3, 95.8, 97.6, 99.1, 100.5, 102.1, 103.5, 105.3, 106.6, 108.1, 109.6, 111.4, 112.8, 114.3, 115.8, 117.7, 119.1, 120.8, 122.3, 124.2, 125.7, 127.2, 128.8, 131.1, 132.5, 133.9, 135.4, 136.9, 138.4, 140, 141.3, 143, 144.5, 146.1, 147.6, 149, 150.5, 152.3, 153.9, 155.6, 156.9, 158.6, 160.1, 162.4, 163.7, 165.1)\nVO2_data &lt;- c(0.465, 0.34, 0.466, 0.503, 0.452, 0.687, 0.846, 0.963, 0.936, 1.125, 1.238, 1.541, 1.395, 1.685, 1.689, 1.622, 1.917, 1.732, 1.835, 1.801, 1.664, 1.744, 1.891, 1.85, 1.858, 1.89, 2.108, 1.962, 1.992, 1.972, 2.026, 1.868, 1.949, 2.033, 1.887, 1.856, 2.112, 2.117, 2.129, 1.994, 2.03, 1.925, 1.916, 1.949, 1.956, 2.119, 1.894, 2.034, 1.766, 1.994, 1.985, 2.068, 1.796, 2.172, 2.09, 2.017, 2.152, 2.238, 2.027, 2.214, 2.159, 2.098, 1.963, 2.063, 2.292, 2.21, 1.84, 2.102, 2.1, 2.086, 2.008, 2.048, 1.978, 1.87, 2.16, 1.977, 2.335, 2.053, 2.084, 2.056, 2.005, 2.161, 2.088, 2.161, 2.078, 2.038, 2.117, 2.148, 2.043, 2.342, 2.142, 2.306, 2.043, 1.881, 1.918, 2.252)\n\n# UI\nui &lt;- fluidPage(\n  titlePanel(\"V̇O2-Modellfunktion\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"VO2\", \"V̇O2\", min = 0.5, max = 7.0, value = 1.7, step = 0.1),\n      sliderInput(\"Tau\", \"Tau\", min = 5, max = 360, value = 23, step = 1.0),\n      sliderInput(\"VO2_Start\", \"V̇O2 Start\", min = 0.2, max = 4.0, value = 0.4, step = 0.1),\n      sliderInput(\"time_delay\", \"Zeitverzögerung\", min = 0, max = 300, value = 10, step = 1),\n      sliderInput(\"VO2_Ruhe\", \"V̇O2 Ruhe\", min = 0, max = 1, value = 0.4, step = 0.1),\n      actionButton(\"toggle_data\", \"Beispieldaten einfügen\"),\n      fileInput(\"file_upload\", \"CSV-Datei hochladen\", accept = \".csv\"),\n      actionButton(\"optimize\", \"Fit: nlsLM\")\n    ),\n    mainPanel(\n      plotlyOutput(\"plot\")\n    )\n  )\n)\n\n# Server\nserver &lt;- function(input, output, session) {\n  show_data &lt;- reactiveVal(FALSE)\n  uploaded_data &lt;- reactiveVal(NULL)\n  \n  observeEvent(input$toggle_data, {\n    show_data(!show_data())\n  })\n  \n  observe({\n    if (input$VO2_Start &lt; input$VO2_Ruhe) {\n      updateSliderInput(session, \"V̇O2, Start\", value = input$VO2_Ruhe)\n    }\n  })\n  \n  observeEvent(input$file_upload, {\n    req(input$file_upload)\n    df &lt;- read.csv(input$file_upload$datapath)\n    if (\"t_s\" %in% names(df) && \"VO2_t\" %in% names(df)) {\n      uploaded_data(df)\n      show_data(TRUE)\n    } else {\n      showModal(modalDialog(\n        title = \"Invalid CSV\",\n        \"Die csv-Datei muss 't_s' und 'VO2_t' als Spaltennamen beinhalten.\",\n        easyClose = TRUE,\n        footer = NULL\n      ))\n    }\n  })\n\n  observeEvent(input$optimize, {\n    if (show_data()) {\n      data_to_use &lt;- if (is.null(uploaded_data())) {\n        data.frame(t_s = t_data, VO2_t = VO2_data)\n      } else {\n        uploaded_data()\n      }\n      \n      t_delay &lt;- isolate(input$time_delay)\n      diffs &lt;- abs(data_to_use$t_s - t_delay)\n      row_index &lt;- which.min(diffs)\n      min_VO2 &lt;- data_to_use$VO2_t[row_index] # VO2 zum Zeitpunkt von t_delay\n      max_VO2 &lt;- max(data_to_use$VO2_t, na.rm = TRUE)\n      VO2_Ruhe &lt;- isolate(input$VO2_Ruhe)\n      \n      # Fitten des VO2_SS * (1 - exp(-(t_s-t_delay)/Tau)) + VO2_Start Terms mit den Startwerten für VO2_SS und C\n      start_values &lt;- list(VO2 = isolate(input$VO2), Tau = isolate(input$Tau), VO2_Start = isolate(input$VO2_Start))\n      \n      fit &lt;- try(nlsLM(VO2_t ~ VO2 * (1 - exp(-(t_s - t_delay) / Tau)) + VO2_Start,\n                       data = data_to_use,\n                       start = start_values,\n                       lower = c(VO2 = 0.5, Tau = 5, VO2_Start = 0.2),\n                       upper = c(VO2 = 7.0, Tau = 360, VO2_Start = 4.0),\n                       control = nls.control(maxiter = 1024)), silent = TRUE)\n      \n      if (!inherits(fit, \"try-error\")) {\n        params &lt;- coef(fit)\n        updateSliderInput(session, \"VO2\", value = params[\"VO2\"])\n        updateSliderInput(session, \"Tau\", value = params[\"Tau\"])\n        updateSliderInput(session, \"VO2_Start\", value = params[\"VO2_Start\"])\n      } else {\n        showModal(modalDialog(\n          title = \"nlsLM fehlgeschlagen\",\n          \"Die nicht-lineare Regression mittels Levenberg-Marquardt-Algorithmus konnte nicht erfolgreich durchgeführt werden.\",\n          easyClose = TRUE,\n          footer = NULL\n        ))\n      }\n    }\n  })\n  \n  output$plot &lt;- renderPlotly({\n    VO2 &lt;- input$VO2\n    Tau &lt;- input$Tau\n    VO2_Start &lt;- input$VO2_Start\n    t_delay &lt;- input$time_delay\n    VO2_Ruhe &lt;- input$VO2_Ruhe\n    \n    # Modellfunktion\n    model_function &lt;- function(t_s, VO2, Tau, VO2_Start, t_delay) {\n      VO2 * (1 - exp(-(t_s - t_delay) / Tau)) + VO2_Start\n    }\n    \n    data_to_use &lt;- if (show_data() && !is.null(uploaded_data())) {\n      uploaded_data()\n    } else {\n      data.frame(t_s = t_data, VO2_t = VO2_data)\n    }\n    \n    tau4 &lt;- 4 * Tau\n    max_t &lt;- max(data_to_use$t_s, na.rm = TRUE)\n    max_x &lt;- max(1.05 * tau4 + t_delay, max_t * 1.05)\n    t_s &lt;- seq(0, max_x * 1.20, by = 1)\n    model_values &lt;- ifelse(t_s &gt;= t_delay, model_function(t_s, VO2, Tau, VO2_Start, t_delay), NA)\n    VO2_SS_gross &lt;- model_function(tau4 + t_delay, VO2, Tau, VO2_Start, t_delay)\n    VO2_SS_net &lt;- VO2_SS_gross - VO2_Ruhe\n    max_y &lt;- max(1.05 * VO2_SS_gross, max(data_to_use$VO2_t, na.rm = TRUE) * 1.05)\n    \n    eq_text &lt;- sprintf(\"V̇O₂ = %.2f * (1 - e&lt;sup&gt;-(t - %.2f) / %.2f&lt;/sup&gt;) + %.2f\",\n                       VO2, t_delay, Tau, VO2_Start)\n    VO2_SS_gross_text &lt;- sprintf(\"V̇O₂ &lt;sub&gt;SS,gross&lt;/sub&gt;: %.3f\", VO2_SS_gross)\n    VO2_SS_net_text &lt;- sprintf(\"VO₂ &lt;sub&gt;SS,net&lt;/sub&gt;: %.3f\", VO2_SS_net)\n    t_halb &lt;- Tau * log(2)\n    \n    shapes &lt;- list(\n      list(\n        type = \"line\", x0 = t_delay, x1 = t_delay, y0 = 0, y1 = max_y * 1.2,\n        line = list(color = \"gray\", width = 1, dash = \"dash\")\n      ),\n      list(\n        type = \"line\", x0 = Tau + t_delay, x1 = Tau + t_delay, y0 = 0, y1 = max_y * 1.2,\n        line = list(color = \"gray\", width = 1, dash = \"dash\")\n      ),\n      list(\n        type = \"line\", x0 = tau4 + t_delay, x1 = tau4 + t_delay, y0 = 0, y1 = max_y * 1.2,\n        line = list(color = \"gray\", width = 1, dash = \"dash\")\n      ),\n      list(\n        type = \"line\", x0 = 0, x1 = max_x, y0 = VO2_Ruhe, y1 = VO2_Ruhe,\n        line = list(color = '#1CADE4', width = 1, dash = \"solid\")\n      )\n    )\n    \n    p &lt;- plot_ly() %&gt;%\n      add_trace(x = ~t_s, y = ~model_values, type = 'scatter', mode = 'lines',\n                name = 'Modellfunktion', line = list(color = '#EF6F6A')) %&gt;%\n      layout(title = \"V̇O&lt;sub&gt;2&lt;/sub&gt;-Modellfunktion\",\n             xaxis = list(title = \"t [s]\"),\n             yaxis = list(title = \"V̇O&lt;sub&gt;2&lt;/sub&gt; [l·min&lt;sup&gt;-1&lt;/sup&gt;]\", tickformat = \".1f\"),\n             shapes = shapes,\n             annotations = list(\n               list(\n                 x = max_x * 0.85,\n                 y = max_y * 0.5,\n                 text = eq_text,\n                 showarrow = FALSE,\n                 xanchor = 'left',\n                 yanchor = 'bottom',\n                 font = list(\n                   family = \"Arial, sans-serif\",\n                   size = 12,\n                   color = \"black\"\n                 )\n               ),\n               list(\n                 x = max_x * 0.85,\n                 y = max_y * 0.4,\n                 text = VO2_SS_gross_text,\n                 showarrow = FALSE,\n                 xanchor = 'left',\n                 yanchor = 'bottom',\n                 font = list(\n                   family = \"Arial, sans-serif\",\n                   size = 12,\n                   color = \"black\"\n                 )\n               ),\n               list(\n                 x = max_x * 0.85,\n                 y = max_y * 0.3,\n                 text = VO2_SS_net_text,\n                 showarrow = FALSE,\n                 xanchor = 'left',\n                 yanchor = 'bottom',\n                 font = list(\n                   family = \"Arial, sans-serif\",\n                   size = 12,\n                   color = \"black\"\n                 )\n               ),\n               list(\n                 x = max_x * 0.85,\n                 y = max_y * 0.2,\n                 text = paste(\"T&lt;sub&gt;1/2&lt;/sub&gt;:\", round(t_halb, 1)),\n                 showarrow = FALSE,\n                 xanchor = 'left',\n                 yanchor = 'bottom',\n                 font = list(\n                   family = \"Arial, sans-serif\",\n                   size = 12,\n                   color = \"black\"\n                 )\n               ),\n               list(\n                 x = t_delay, y = max_y * 0.9, text = sprintf(\"t&lt;sub&gt;delay&lt;/sub&gt;: %.1f\", t_delay), showarrow = FALSE, xanchor = \"left\", yanchor = \"bottom\",\n                 textangle = -90, font = list(size = 11)\n               ),\n               list(\n                 x = Tau + t_delay, y = max_y * 0.9, text = sprintf(\"tau: %.1f\", Tau), showarrow = FALSE, xanchor = \"left\", yanchor = \"bottom\",\n                 textangle = -90, font = list(size = 11)\n               ),\n               list(\n                 x = tau4 + t_delay, y = max_y * 0.9, text = sprintf(\"4tau: %.1f\", tau4), showarrow = FALSE, xanchor = \"left\", yanchor = \"bottom\",\n                 textangle = -90, font = list(size = 11)\n               )\n             )) %&gt;%\n      add_trace(x = ~t_s, y = ~rep(VO2_Ruhe, length(t_s)), type = 'scatter', mode = 'lines',\n                name = 'V̇O&lt;sub&gt;2, Ruhe&lt;/sub&gt;', line = list(color = '#1CADE4'))\n    \n    if (show_data()) {\n      # Modellwerte für die eingefügten Datenpunkte berechnen\n      model_values_at_data &lt;- model_function(data_to_use$t_s, VO2, Tau, VO2_Start, t_delay)\n      \n      # Beschränke die Daten auf den Zeitraum von t_delay bis max_t für die R²-Berechnung\n      data_subset &lt;- data_to_use[data_to_use$t_s &gt;= t_delay & data_to_use$t_s &lt;= max_t, ]\n      \n      # R² berechnen\n      ss_res &lt;- sum((data_subset$VO2_t - model_values_at_data[data_to_use$t_s &gt;= t_delay & data_to_use$t_s &lt;= max_t])^2, na.rm = TRUE)\n      ss_tot &lt;- sum((data_subset$VO2_t - mean(data_subset$VO2_t, na.rm = TRUE))^2, na.rm = TRUE)\n      r_squared &lt;- 1 - (ss_res / ss_tot)\n      \n      p &lt;- p %&gt;%\n        add_trace(data = data_to_use, x = ~t_s, y = ~VO2_t, type = 'scatter', mode = 'markers+lines',\n                  name = 'V̇O&lt;sub&gt;2&lt;/sub&gt;', \n                  marker = list(color = 'rgba(38, 131, 198, 0.9)', size = 5.0),\n                  line = list(color = 'rgba(38, 131, 198, 1.0)', width = 0.65, dash = '4 4')) %&gt;%\n        layout(annotations = list(\n          list(\n            x = max_x * 0.85,\n            y = max_y * 0.1,\n            text = sprintf(\"R²: %.3f\", r_squared),\n            showarrow = FALSE,\n            xanchor = 'left',\n            yanchor = 'bottom',\n            font = list(\n              family = \"Arial, sans-serif\",\n              size = 12,\n              color = \"black\"\n            )\n          )\n        ))\n    }\n    \n    p\n  })\n}\n\n# App ausführen\nshinyApp(ui = ui, server = server)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "VO2-Modellfunktion"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n\nCode\n1 + 1\n\n\n[1] 2"
  },
  {
    "objectID": "Laktat.html",
    "href": "Laktat.html",
    "title": "Laktat-Leistungs-Beziehung",
    "section": "",
    "text": "1 Laktat-Leistungs - Beziehung in einer Shiny App\n#| standalone: true\n#| viewerHeight: 900\nlibrary(shiny)\nlibrary(plotly)\n\n# UI\nui &lt;- fluidPage(\n  titlePanel(\"Laktat-Leistungs-Modell\"),\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"num_rows\", \"Anzahl der Datenpunkte\", 4, min = 1, max = 20),\n      uiOutput(\"input_fields\"),\n      width = 2  \n    ),\n    mainPanel(\n      plotlyOutput(\"plot\"),\n      width = 10  \n    )\n  )\n)\n\n# Server\nserver &lt;- function(input, output, session) {\n  # Initialwerte für die Leistung und ΔBLC\n  initial_values &lt;- list(\n    list(Leistung = 100, DeltaBLC = 0.3),\n    list(Leistung = 200, DeltaBLC = 1.0),\n    list(Leistung = 300, DeltaBLC = 2.8),\n    list(Leistung = 400, DeltaBLC = 8.0)\n  )\n  \n  # Dynamisch Input-Felder erzeugen\n  output$input_fields &lt;- renderUI({\n    num_rows &lt;- input$num_rows\n    \n    lapply(1:num_rows, function(i) {\n      initial_value &lt;- if (i &lt;= length(initial_values)) initial_values[[i]] else list(Leistung = 0, DeltaBLC = 0)\n      tagList(\n        numericInput(paste0(\"leistung_\", i), paste(\"Leistung\", i), value = initial_value$Leistung, step = 10),\n        numericInput(paste0(\"deltaBLC_\", i), paste(\"ΔBLC\", i), value = initial_value$DeltaBLC, step = 0.1)\n      )\n    })\n  })\n  \n  # Reaktive Datenframe basierend auf Eingabewerten\n  input_data &lt;- reactive({\n    num_rows &lt;- input$num_rows\n    if (is.null(num_rows)) return(NULL)\n    \n    data &lt;- data.frame(Leistung = numeric(num_rows), ΔBLC = numeric(num_rows))\n    \n    for (i in 1:num_rows) {\n      leistung_val &lt;- input[[paste0(\"leistung_\", i)]]\n      deltaBLC_val &lt;- input[[paste0(\"deltaBLC_\", i)]]\n      \n      if (is.null(leistung_val) || is.null(deltaBLC_val)) {\n        data$Leistung[i] &lt;- if (i &lt;= length(initial_values)) initial_values[[i]]$Leistung else 0\n        data$ΔBLC[i] &lt;- if (i &lt;= length(initial_values)) initial_values[[i]]$DeltaBLC else 0\n      } else {\n        data$Leistung[i] &lt;- leistung_val\n        data$ΔBLC[i] &lt;- deltaBLC_val\n      }\n    }\n    \n    data\n  })\n  \n  # Initiale Werte setzen\n  observe({\n    for (i in 1:length(initial_values)) {\n      updateNumericInput(session, paste0(\"leistung_\", i), value = initial_values[[i]]$Leistung)\n      updateNumericInput(session, paste0(\"deltaBLC_\", i), value = initial_values[[i]]$DeltaBLC)\n    }\n  })\n  \n  # Modell anpassen und Plot aktualisieren\n  output$plot &lt;- renderPlotly({\n    df_proband &lt;- input_data()\n    \n    if (is.null(df_proband)) return(NULL)\n    \n    # Anpassung des Exponentialmodells\n    model &lt;- nls(ΔBLC ~ a * exp(b * Leistung), data = df_proband, start = list(a = 1, b = 0.01))\n    coef_exponential_model &lt;- coef(model)\n    \n    # Vorhersagen und Sequenz für den Plot\n    x_seq &lt;- seq(min(df_proband$Leistung), max(df_proband$Leistung), length.out = 100)\n    y_pred &lt;- predict(model, newdata = data.frame(Leistung = x_seq))\n    \n    # Plotly-Diagramm\n    plot_ly() %&gt;%\n      add_trace(data = df_proband, x = ~Leistung, y = ~ΔBLC, type = 'scatter', mode = 'markers',\n                name = \"ΔBLC\",\n                marker = list(color = \"#2683C6\", size = 7.0)) %&gt;%\n      add_trace(x = ~x_seq, y = ~y_pred, type = 'scatter', mode = 'lines', \n                name = 'Laktat-Modellfunktion', \n                line = list(color = '#62A39F', width = 3)) %&gt;%\n      add_annotations(text = sprintf(\"ΔBLC = %.5f \\u00B7 e&lt;sup&gt;%.5f \\u00B7 Leistung&lt;/sup&gt;\", \n                                     coef_exponential_model['a'], coef_exponential_model['b']),\n                      x = min(df_proband$Leistung), y = max(y_pred), showarrow = FALSE,\n                      xanchor = 'left', yanchor = 'bottom',\n                      font = list(family = \"Arial, sans-serif\", size = 12, color = \"black\")) %&gt;%\n      layout(\n        title = \"Laktat-Leistungs-Modell\",\n        margin = list(t = 40),\n        xaxis = list(title = \"Leistung [Watt]\"),\n        yaxis = list(title = \"ΔBLC [mmol \\u00B7 l&lt;sup&gt;-1&lt;/sup&gt;]\")\n      )\n  })\n}\n\n# App starten\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Laktat-Leistung"
    ]
  },
  {
    "objectID": "EPOC.html",
    "href": "EPOC.html",
    "title": "EPOC-Modellfunktion",
    "section": "",
    "text": "1 Modellfunktion des EPOC in Abhängigkeit von der Zeit während der Belastung\n#| standalone: true\n#| viewerHeight: 800\nlibrary(shiny)\nlibrary(plotly)\n\n# Modellfunktion\nmodel_function &lt;- function(t_s, A, TauA, B, TauB, C) {\n  A * exp(-t_s / TauA) + B * exp(-t_s / TauB) + C\n}\n\n# UI\nui &lt;- fluidPage(\n  titlePanel(\"Biexponentielle Modellfunktion\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"A\", \"A\", min = 0.5, max = 6, value = 3),\n      sliderInput(\"TauA\", \"TauA\", min = 15, max = 90, value = 30),\n      sliderInput(\"B\", \"B\", min = 0.2, max = 5, value = 1.5),\n      sliderInput(\"TauB\", \"TauB\", min = 90, max = 1800, value = 300),\n      sliderInput(\"C\", \"C\", min = 0, max = 1, value = 0.4),\n      sliderInput(\"O2_Store\", \"O2-Speicher\", min = 0, max = 1, value = 0.4)\n    ),\n    mainPanel(\n      plotlyOutput(\"plot\")\n    )\n  )\n)\n\n# Server\nserver &lt;- function(input, output, session) {\n  \n  # Modellfunktion als reaktives Element\n  model_function &lt;- reactive({\n    function(t_s, A, TauA, B, TauB, C) {\n      A * exp(-t_s / TauA) + B * exp(-t_s / TauB) + C\n    }\n  })\n  \n  output$plot &lt;- renderPlotly({\n    A &lt;- input$A\n    TauA &lt;- input$TauA\n    B &lt;- input$B\n    TauB &lt;- input$TauB\n    C &lt;- input$C\n    O2_Store &lt;- input$O2_Store\n    \n    max_x &lt;- 600 + 0.5 * TauB\n    max_y &lt;- (A + B + C) * 1.1\n    \n    t_s &lt;- seq(0, max_x, by = 1)\n    \n    model_values &lt;- model_function()(t_s, A, TauA, B, TauB, C)\n    model_fast &lt;- A * exp(-t_s / TauA)\n    model_slow &lt;- B * exp(-t_s / TauB)\n    model_ruhe &lt;- rep(C, length(t_s))\n    \n    # Integrieren von model_fast über die Zeit\n    model_fast_func &lt;- function(t_s) A * exp(-t_s / TauA)\n    integrated_model_fast &lt;- integrate(model_fast_func, lower = min(t_s), upper = max(t_s))\n    \n    VO2_fast &lt;- integrated_model_fast$value / 60\n    CE_max &lt;- 21.1307796 # Beispielwert, CE_max sollte durch den tatsächlichen Wert ersetzt werden\n    WPCR &lt;- VO2_fast * CE_max\n    WPCR_corrected &lt;- ifelse(VO2_fast &lt; O2_Store, 0, (VO2_fast * CE_max) - (O2_Store * CE_max))\n    \n    # Berechnung des Zeitpunkts, bei dem die Fläche unter `model_fast` dem `O2_Store` entspricht\n    cumulative_area &lt;- cumsum(A * exp(-t_s / TauA)) * diff(t_s)[1]\n    O2_Store_index &lt;- which.min(abs(cumulative_area - O2_Store * 60))\n    O2_Store_x &lt;- t_s[O2_Store_index]\n    \n    # Gleichungstext zusammenstellen\n    eq_text &lt;- sprintf(\"V̇O₂ = %.2f * e&lt;sup&gt;-(t / %.2f)&lt;/sup&gt; + %.2f * e&lt;sup&gt;-(t / %.2f)&lt;/sup&gt; + %.2f\", \n                       A, TauA, B, TauB, C)\n    \n    # Plotly-Plot\n    plot_ly() %&gt;%\n      add_trace(x = ~t_s, y = ~model_values, type = 'scatter', mode = 'lines', \n                name = 'Modellfunktion', line = list(color = '#EF6F6A')) %&gt;%\n      add_trace(x = ~t_s, y = ~model_fast, type = 'scatter', mode = 'lines', \n                name = 'EPOC&lt;sub&gt;fast&lt;/sub&gt;', line = list(color = '#42BA97')) %&gt;%\n      add_trace(x = ~t_s, y = ~model_slow, type = 'scatter', mode = 'lines', \n                name = 'EPOC&lt;sub&gt;slow&lt;/sub&gt;', line = list(color = '#BB7693')) %&gt;%\n      add_trace(x = ~t_s, y = ~model_ruhe, type = 'scatter', mode = 'lines', \n                name = 'C', line = list(color = '#1CADE4')) %&gt;%\n      add_ribbons(x = ~t_s, ymin = 0, ymax = ~model_fast, \n                  name = 'EPOC&lt;sub&gt;fast,Integriert&lt;/sub&gt;', fillcolor = 'rgba(66,186,151,0.5)', \n                  line = list(color = \"rgba(0,0,0,0)\")) %&gt;%\n      add_ribbons(x = ~t_s, ymin = 0, ymax = ~model_fast, \n                  data = data.frame(t_s = t_s[1:O2_Store_index], model_fast = model_fast[1:O2_Store_index]),\n                  fillcolor = 'rgba(0,131,143,0.3)', line = list(color = \"rgba(0,0,0,0)\", dash = \"dash\"), \n                  name = 'O&lt;sub&gt;2&lt;/sub&gt;-Speicher') %&gt;%\n      add_trace(x = c(O2_Store_x, O2_Store_x), y = c(0, max(model_fast[O2_Store_index])),\n                type = 'scatter', mode = 'lines', \n                line = list(color = \"#00838F\", width = 1, dash = \"dash\"),\n                name = 'O2 Store Linie', showlegend = FALSE) %&gt;%\n      layout(title = \"EPOC-Modellfunktion\",\n             xaxis = list(title = \"Zeit [s]\", range = c(0, max_x), autorange = FALSE),\n             yaxis = list(title = \"V&#775;O&lt;sub&gt;2&lt;/sub&gt; [l&#183;min&lt;sup&gt;-1&lt;/sup&gt;]\", range = c(0, max_y)),\n             shapes = list(\n               list(\n                 type = \"line\",\n                 x0 = 2 * TauA,\n                 x1 = 2 * TauA,\n                 y0 = 0,\n                 y1 = max_y,\n                 line = list(color = \"gray\", width = 0.5, dash = \"dash\")\n               ),\n               list(\n                 type = \"line\",\n                 x0 = 8 * TauA,\n                 x1 = 8 * TauA,\n                 y0 = 0,\n                 y1 = max_y,\n                 line = list(color = \"gray\", width = 0.5, dash = \"dash\")\n               )\n             ),\n             annotations = list(\n               list(\n                 x = 2 * TauA, y = max_y * 0.85, text = sprintf(\"2tau: %.1f\", 2 * TauA), showarrow = FALSE, xanchor = \"left\", yanchor = \"bottom\",\n                 textangle = -90, font = list(size = 11, color = \"darkgrey\")\n               ),\n               list(\n                 x = 8 * TauA, y = max_y * 0.85, text = sprintf(\"8tau: %.1f\", 8 * TauA), showarrow = FALSE, xanchor = \"left\", yanchor = \"bottom\",\n                 textangle = -90, font = list(size = 11, color = \"darkgrey\")\n               ),\n               list(\n                 x = max_x * 0.5, \n                 y = max_y * 0.85,  # Position für WPCR\n                 text = paste(\"W&lt;sub&gt;PCR&lt;/sub&gt;:\", round(WPCR, 2), \"kJ\"),\n                 showarrow = FALSE,\n                 xanchor = 'left',\n                 yanchor = 'bottom',\n                 font = list(\n                   size = 12,\n                   color = \"black\"\n                 )\n               ),\n               list(\n                 x = max_x * 0.5, \n                 y = max_y * 0.75,  # Angepasste Position für WPCR corrected\n                 text = paste(\"W&lt;sub&gt;PCR, korrigiert&lt;/sub&gt;:\", round(WPCR_corrected, 2), \"kJ\"),\n                 showarrow = FALSE,\n                 xanchor = 'left',\n                 yanchor = 'bottom',\n                 font = list(\n                   size = 12,\n                   color = \"black\"\n                 )\n               ),\n               list(\n                 x = max_x * 0.5, \n                 y = max_y * 0.95,  # Angepasste Position für Gleichungstext\n                 text = eq_text,\n                 showarrow = FALSE,\n                 xanchor = 'left',\n                 yanchor = 'bottom',\n                 font = list(\n                   size = 12,\n                   color = \"black\"\n                 )\n               )\n             ))\n  })\n}\n\n# App ausführen\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "EPOC-Modellfunktion"
    ]
  }
]