[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n\nCode\n1 + 1\n\n\n[1] 2"
  },
  {
    "objectID": "VO2.html",
    "href": "VO2.html",
    "title": "VO2-Modellfunktion während der Belastung",
    "section": "",
    "text": "1 Modellfunktion des Sauerstoffvolumenstroms in Abhängigkeit von der Zeit während der Belastung\n#| standalone: true\n#| viewerHeight: 900\n\nlibrary(shiny)\nlibrary(plotly)\nlibrary(minpack.lm)\n\n# Beispieldaten\nt_data &lt;- c(0, 2.8, 5.3, 8.6, 10.4, 15.2, 19.7, 22.5, 24.5, 26.2, 28.2, 31.6, 33.5, 35.3, 37, 38.5, 40.3, 41.9, 43.5, 45.2, 46.8, 48.4, 50, 51.5, 53.3, 54.8, 56.5, 57.9, 59.5, 61.1, 62.9, 64.3, 65.8, 67.7, 69.1, 70.7, 72.4, 73.9, 75.7, 77.2, 78.9, 80.5, 82.7, 84.1, 85.5, 87, 88.6, 90.2, 91.5, 92.9, 94.3, 95.8, 97.6, 99.1, 100.5, 102.1, 103.5, 105.3, 106.6, 108.1, 109.6, 111.4, 112.8, 114.3, 115.8, 117.7, 119.1, 120.8, 122.3, 124.2, 125.7, 127.2, 128.8, 131.1, 132.5, 133.9, 135.4, 136.9, 138.4, 140, 141.3, 143, 144.5, 146.1, 147.6, 149, 150.5, 152.3, 153.9, 155.6, 156.9, 158.6, 160.1, 162.4, 163.7, 165.1)\nVO2_data &lt;- c(0.465, 0.34, 0.466, 0.503, 0.452, 0.687, 0.846, 0.963, 0.936, 1.125, 1.238, 1.541, 1.395, 1.685, 1.689, 1.622, 1.917, 1.732, 1.835, 1.801, 1.664, 1.744, 1.891, 1.85, 1.858, 1.89, 2.108, 1.962, 1.992, 1.972, 2.026, 1.868, 1.949, 2.033, 1.887, 1.856, 2.112, 2.117, 2.129, 1.994, 2.03, 1.925, 1.916, 1.949, 1.956, 2.119, 1.894, 2.034, 1.766, 1.994, 1.985, 2.068, 1.796, 2.172, 2.09, 2.017, 2.152, 2.238, 2.027, 2.214, 2.159, 2.098, 1.963, 2.063, 2.292, 2.21, 1.84, 2.102, 2.1, 2.086, 2.008, 2.048, 1.978, 1.87, 2.16, 1.977, 2.335, 2.053, 2.084, 2.056, 2.005, 2.161, 2.088, 2.161, 2.078, 2.038, 2.117, 2.148, 2.043, 2.342, 2.142, 2.306, 2.043, 1.881, 1.918, 2.252)\n\n# UI\nui &lt;- fluidPage(\n  titlePanel(\"V̇O2-Modellfunktion\"),\n  sidebarLayout(\n    sidebarPanel(\n      width = 3,\n      sliderInput(\"VO2\", \"V̇O2\", min = 0.0, max = 7.0, value = 1.7, step = 0.1),\n      sliderInput(\"Tau\", \"Tau\", min = 5, max = 360, value = 23, step = 1.0),\n      sliderInput(\"VO2_Start\", \"V̇O2 Start\", min = 0.0, max = 4.0, value = 0.4, step = 0.1),\n      sliderInput(\"VO2_Ruhe\", \"V̇O2 Ruhe\", min = 0, max = 1, value = 0.4, step = 0.1),\n      sliderInput(\"time_delay\", \"Zeitverzögerung\", min = 0, max = 300, value = 10, step = 1),\n      conditionalPanel(\n        condition = \"output.showFitSlider\",\n        sliderInput(\"nlsLM_end\", \"nlsLM Ende\", min = 10, max = max(t_data), value = max(t_data), step = 1)\n      ),\n      actionButton(\"toggle_data\", \"Beispieldaten einfügen\"),\n      fileInput(\"file_upload\", \"CSV-Datei hochladen\", accept = \".csv\"),\n      actionButton(\"optimize\", \"Fit: nlsLM\")\n    ),\n    mainPanel(\n      width = 9,\n      plotlyOutput(\"plot\")\n    )\n  )\n)\n\n# Server\nserver &lt;- function(input, output, session) {\n  show_data &lt;- reactiveVal(FALSE)\n  uploaded_data &lt;- reactiveVal(NULL)\n  \n  observeEvent(input$toggle_data, {\n    show_data(!show_data())\n    max_t &lt;- max(t_data)\n    updateSliderInput(session, \"nlsLM_end\", min = input$time_delay, max = max_t, value = max_t)\n  })\n  \n  observeEvent(input$file_upload, {\n    req(input$file_upload)\n    df &lt;- read.csv(input$file_upload$datapath)\n    if (\"t_s\" %in% names(df) && \"VO2_t\" %in% names(df)) {\n      uploaded_data(df)\n      show_data(TRUE)\n      max_t &lt;- max(df$t_s)\n      updateSliderInput(session, \"nlsLM_end\", min = input$time_delay, max = max_t, value = max_t)\n    } else {\n      showModal(modalDialog(\n        title = \"Invalid CSV\",\n        \"Die csv-Datei muss 't_s' und 'VO2_t' als Spaltennamen beinhalten.\",\n        easyClose = TRUE,\n        footer = NULL\n      ))\n    }\n  })\n  \n  observe({\n    if (input$VO2_Start &lt; input$VO2_Ruhe) {\n      updateSliderInput(session, \"VO2_Start\", value = input$VO2_Ruhe)\n    }\n  })\n  \n  output$showFitSlider &lt;- reactive({\n    show_data()\n  })\n  outputOptions(output, \"showFitSlider\", suspendWhenHidden = FALSE)\n  \n  observeEvent(input$optimize, {\n    if (show_data()) {\n      Beispieldaten &lt;- if (is.null(uploaded_data())) {\n        data.frame(t_s = t_data, VO2_t = VO2_data)\n      } else {\n        uploaded_data()\n      }\n      \n      t_delay &lt;- isolate(input$time_delay)\n      nlsLM_end &lt;- isolate(input$nlsLM_end)\n      \n      # Finde den nächstgelegenen Zeitpunkt zu t_delay\n      closest_index &lt;- which.min(abs(Beispieldaten$t_s - t_delay))\n      \n      # Setze VO2_Start auf den gerundeten Wert des nächsten Punktes\n      VO2_Start &lt;- round(Beispieldaten$VO2_t[closest_index], 1)\n      \n      updateSliderInput(session, \"VO2_Start\", value = VO2_Start)\n      \n      data_subset &lt;- Beispieldaten[Beispieldaten$t_s &gt;= t_delay & Beispieldaten$t_s &lt;= nlsLM_end, ]\n      \n      start_values &lt;- list(VO2 = isolate(input$VO2), Tau = isolate(input$Tau))\n      \n      fit &lt;- try(nlsLM(VO2_t ~ VO2 * (1 - exp(-(t_s - t_delay) / Tau)) + VO2_Start,\n                       data = data_subset,\n                       start = start_values,\n                       lower = c(VO2 = 0.5, Tau = 5),\n                       upper = c(VO2 = 7.0, Tau = 360),\n                       control = nls.control(maxiter = 1024)), silent = TRUE)\n      \n      if (!inherits(fit, \"try-error\")) {\n        params &lt;- as.list(coef(fit))\n        updateSliderInput(session, \"VO2\", value = params$VO2)\n        updateSliderInput(session, \"Tau\", value = params$Tau)\n      } else {\n        showModal(modalDialog(\n          title = \"nlsLM fehlgeschlagen\",\n          \"Die nicht-lineare Regression mittels Levenberg-Marquardt-Algorithmus konnte nicht erfolgreich durchgeführt werden.\",\n          easyClose = TRUE,\n          footer = NULL\n        ))\n      }\n    }\n  })\n  \n  output$plot &lt;- renderPlotly({\n    VO2 &lt;- input$VO2\n    Tau &lt;- input$Tau\n    VO2_Start &lt;- input$VO2_Start\n    t_delay &lt;- input$time_delay\n    VO2_Ruhe &lt;- input$VO2_Ruhe\n    nlsLM_end &lt;- input$nlsLM_end\n    \n    model_function &lt;- function(t_s, VO2, Tau, VO2_Start, t_delay) {\n      VO2 * (1 - exp(-(t_s - t_delay) / Tau)) + VO2_Start\n    }\n    \n    Beispieldaten &lt;- if (show_data() && !is.null(uploaded_data())) {\n      uploaded_data()\n    } else {\n      data.frame(t_s = t_data, VO2_t = VO2_data)\n    }\n    \n    tau4 &lt;- 4 * Tau\n    max_t &lt;- max(Beispieldaten$t_s, na.rm = TRUE)\n    max_x &lt;- max(1.05 * tau4 + t_delay, max_t * 1.05)\n    t_s &lt;- seq(0, max_x * 1.20, by = 1)\n    model_values &lt;- ifelse(t_s &gt;= t_delay, model_function(t_s, VO2, Tau, VO2_Start, t_delay), NA)\n    VO2_SS_gross &lt;- model_function(tau4 + t_delay, VO2, Tau, VO2_Start, t_delay)\n    VO2_SS_net &lt;- VO2_SS_gross - VO2_Ruhe\n    max_y &lt;- max(1.05 * VO2_SS_gross, max(Beispieldaten$VO2_t, na.rm = TRUE) * 1.05)\n    \n    eq_text &lt;- sprintf(\"V̇O₂ = %.2f * (1 - e&lt;sup&gt;-(t - %.2f) / %.2f&lt;/sup&gt;) + %.2f\",\n                       VO2, t_delay, Tau, VO2_Start)\n    VO2_SS_gross_text &lt;- sprintf(\"V̇O₂ &lt;sub&gt;SS,gross&lt;/sub&gt;: %.3f\", VO2_SS_gross)\n    VO2_SS_net_text &lt;- sprintf(\"VO₂ &lt;sub&gt;SS,net&lt;/sub&gt;: %.3f\", VO2_SS_net)\n    t_halb &lt;- Tau * log(2)\n    \n    shapes &lt;- list(\n      list(\n        type = \"line\", x0 = t_delay, x1 = t_delay, y0 = 0, y1 = max_y * 1.2,\n        line = list(color = \"gray\", width = 1, dash = \"dash\")\n      ),\n      list(\n        type = \"line\", x0 = Tau + t_delay, x1 = Tau + t_delay, y0 = 0, y1 = max_y * 1.2,\n        line = list(color = \"gray\", width = 1, dash = \"dash\")\n      ),\n      list(\n        type = \"line\", x0 = tau4 + t_delay, x1 = tau4 + t_delay, y0 = 0, y1 = max_y * 1.2,\n        line = list(color = \"gray\", width = 1, dash = \"dash\")\n      ),\n      if (show_data()) {\n        list(\n          type = \"line\", x0 = nlsLM_end, x1 = nlsLM_end, y0 = 0, y1 = max_y * 1.2,\n          line = list(color = \"gray\", width = 1, dash = \"dash\")\n        )\n      },\n      list(\n        type = \"line\", x0 = 0, x1 = max_x, y0 = VO2_Ruhe, y1 = VO2_Ruhe,\n        line = list(color = '#1CADE4', width = 1, dash = \"solid\")\n      )\n    )\n    \n    p &lt;- plot_ly() %&gt;%\n      add_trace(x = ~t_s, y = ~model_values, type = 'scatter', mode = 'lines',\n                name = 'Modellfunktion', line = list(color = '#EF6F6A')) %&gt;%\n      layout(title = \"V̇O&lt;sub&gt;2&lt;/sub&gt;-Modellfunktion\",\n             margin = list(t = 40),\n             xaxis = list(title = \"t [s]\"),\n             yaxis = list(title = \"V̇O&lt;sub&gt;2&lt;/sub&gt; [l·min&lt;sup&gt;-1&lt;/sup&gt;]\", tickformat = \".1f\"),\n             shapes = shapes,\n             annotations = list(\n               list(\n                 x = max_x * 0.85,\n                 y = max_y * 0.5,\n                 text = eq_text,\n                 showarrow = FALSE,\n                 xanchor = 'left',\n                 yanchor = 'bottom',\n                 font = list(\n                   family = \"Arial, sans-serif\",\n                   size = 12,\n                   color = \"black\"\n                 )\n               ),\n               list(\n                 x = max_x * 0.85,\n                 y = max_y * 0.4,\n                 text = VO2_SS_gross_text,\n                 showarrow = FALSE,\n                 xanchor = 'left',\n                 yanchor = 'bottom',\n                 font = list(\n                   family = \"Arial, sans-serif\",\n                   size = 12,\n                   color = \"black\"\n                 )\n               ),\n               list(\n                 x = max_x * 0.85,\n                 y = max_y * 0.3,\n                 text = VO2_SS_net_text,\n                 showarrow = FALSE,\n                 xanchor = 'left',\n                 yanchor = 'bottom',\n                 font = list(\n                   family = \"Arial, sans-serif\",\n                   size = 12,\n                   color = \"black\"\n                 )\n               ),\n               list(\n                 x = max_x * 0.85,\n                 y = max_y * 0.2,\n                 text = paste(\"T&lt;sub&gt;1/2&lt;/sub&gt;:\", round(t_halb, 1)),\n                 showarrow = FALSE,\n                 xanchor = 'left',\n                 yanchor = 'bottom',\n                 font = list(\n                   family = \"Arial, sans-serif\",\n                   size = 12,\n                   color = \"black\"\n                 )\n               ),\n               list(\n                 x = t_delay, y = max_y * 0.9, text = sprintf(\"t&lt;sub&gt;delay&lt;/sub&gt;: %.1f\", t_delay), showarrow = FALSE, xanchor = \"left\", yanchor = \"bottom\",\n                 textangle = -90, font = list(size = 11)\n               ),\n               list(\n                 x = Tau + t_delay, y = max_y * 0.9, text = sprintf(\"tau: %.1f\", Tau), showarrow = FALSE, xanchor = \"left\", yanchor = \"bottom\",\n                 textangle = -90, font = list(size = 11)\n               ),\n               list(\n                 x = tau4 + t_delay, y = max_y * 0.9, text = sprintf(\"4tau: %.1f\", tau4), showarrow = FALSE, xanchor = \"left\", yanchor = \"bottom\",\n                 textangle = -90, font = list(size = 11)\n               ),\n               if (show_data()) {\n                 list(\n                   x = nlsLM_end, y = max_y * 0.9, text = sprintf(\"nlsLM Ende: %.1f\", nlsLM_end), showarrow = FALSE, xanchor = \"left\", yanchor = \"bottom\",\n                   textangle = -90, font = list(size = 11)\n                 )\n               }\n             )) %&gt;%\n      add_trace(x = ~t_s, y = ~rep(VO2_Ruhe, length(t_s)), type = 'scatter', mode = 'lines',\n                name = 'V̇O&lt;sub&gt;2, Ruhe&lt;/sub&gt;', line = list(color = '#1CADE4'))\n    \n    if (show_data()) {\n      model_values_at_data &lt;- model_function(Beispieldaten$t_s, VO2, Tau, VO2_Start, t_delay)\n      \n      data_subset &lt;- Beispieldaten[Beispieldaten$t_s &gt;= t_delay & Beispieldaten$t_s &lt;= input$nlsLM_end, ]\n      \n      ss_res &lt;- sum((data_subset$VO2_t - model_values_at_data[Beispieldaten$t_s &gt;= t_delay & Beispieldaten$t_s &lt;= input$nlsLM_end])^2, na.rm = TRUE)\n      ss_tot &lt;- sum((data_subset$VO2_t - mean(data_subset$VO2_t, na.rm = TRUE))^2, na.rm = TRUE)\n      r_squared &lt;- 1 - (ss_res / ss_tot)\n      \n      p &lt;- p %&gt;%\n        add_trace(data = Beispieldaten, x = ~t_s, y = ~VO2_t, type = 'scatter', mode = 'markers+lines',\n                  name = 'V̇O&lt;sub&gt;2&lt;/sub&gt;', \n                  marker = list(color = 'rgba(38, 131, 198, 0.9)', size = 5.0),\n                  line = list(color = 'rgba(38, 131, 198, 1.0)', width = 0.65, dash = '4 4')) %&gt;%\n        layout(annotations = list(\n          list(\n            x = max_x * 0.85,\n            y = max_y * 0.1,\n            text = sprintf(\"R²: %.3f\", r_squared),\n            showarrow = FALSE,\n            xanchor = 'left',\n            yanchor = 'bottom',\n            font = list(\n              family = \"Arial, sans-serif\",\n              size = 12,\n              color = \"black\"\n            )\n          )\n        ))\n    }\n    \n    p\n  })\n}\n\n# App ausführen\nshinyApp(ui = ui, server = server)\n\n\nCode\n#::: {.callout-note icon=false}\n## nlsLM\n#Die Funktion der automatischen Anpassung mittels nichtlinearer Regression ist noch nicht funktionsfähig.\n#:::\n\n\n\n\n\n\n\n\nCSV-Datei hochladen\n\n\n\nVO2-Daten können als CSV-Datei im folgenden Format hochgeladen werden: t_s,VO2_t 0.0,0.479 1.0,0.459 2.3,0.488 3.5,0.477 …\n\n\n\n\n2 Bi-exponentiale Modellfunktion des Sauerstoffvolumenstroms in Abhängigkeit von der Zeit während der Belastung\n#| standalone: true\n#| viewerHeight: 900\n\nlibrary(shiny)\nlibrary(plotly)\nlibrary(minpack.lm)\n\n# Example data\nt_data &lt;- c(0, 2.8, 5.3, 8.6, 10.4, 15.2, 19.7, 22.5, 24.5, 26.2, 28.2, 31.6, 33.5, 35.3, 37, 38.5, 40.3, 41.9, 43.5, 45.2, 46.8, 48.4, 50, 51.5, 53.3, 54.8, 56.5, 57.9, 59.5, 61.1, 62.9, 64.3, 65.8, 67.7, 69.1, 70.7, 72.4, 73.9, 75.7, 77.2, 78.9, 80.5, 82.7, 84.1, 85.5, 87, 88.6, 90.2, 91.5, 92.9, 94.3, 95.8, 97.6, 99.1, 100.5, 102.1, 103.5, 105.3, 106.6, 108.1, 109.6, 111.4, 112.8, 114.3, 115.8, 117.7, 119.1, 120.8, 122.3, 124.2, 125.7, 127.2, 128.8, 131.1, 132.5, 133.9, 135.4, 136.9, 138.4, 140, 141.3, 143, 144.5, 146.1, 147.6, 149, 150.5, 152.3, 153.9, 155.6, 156.9, 158.6, 160.1, 162.4, 163.7, 165.1)\nVO2_data &lt;- c(0.465, 0.34, 0.466, 0.503, 0.452, 0.687, 0.846, 0.963, 0.936, 1.125, 1.238, 1.541, 1.395, 1.685, 1.689, 1.622, 1.917, 1.732, 1.835, 1.801, 1.664, 1.744, 1.891, 1.85, 1.858, 1.89, 2.108, 1.962, 1.992, 1.972, 2.026, 1.868, 1.949, 2.033, 1.887, 1.856, 2.112, 2.117, 2.129, 1.994, 2.03, 1.925, 1.916, 1.949, 1.956, 2.119, 1.894, 2.034, 1.766, 1.994, 1.985, 2.068, 1.796, 2.172, 2.09, 2.017, 2.152, 2.238, 2.027, 2.214, 2.159, 2.098, 1.963, 2.063, 2.292, 2.21, 1.84, 2.102, 2.1, 2.086, 2.008, 2.048, 1.978, 1.87, 2.16, 1.977, 2.335, 2.053, 2.084, 2.056, 2.005, 2.161, 2.088, 2.161, 2.078, 2.038, 2.117, 2.148, 2.043, 2.342, 2.142, 2.306, 2.043, 1.881, 1.918, 2.252)\n\n# UI\nui &lt;- fluidPage(\n  titlePanel(\"Biexponentielle V̇O2-Modellfunktion\"),\n  sidebarLayout(\n    sidebarPanel(\n      width = 3,\n      sliderInput(\"VO2\", \"V̇O2_fast\", min = 0.0, max = 7.0, value = 1.5, step = 0.1),\n      sliderInput(\"tau_fast\", \"Tau_fast\", min = 5, max = 360, value = 20, step = 1.0),\n      sliderInput(\"VO2_Start\", \"V̇O2_Start\", min = 0.0, max = 4.0, value = 0.6, step = 0.1),\n      sliderInput(\"VO2_Ruhe\", \"V̇O2_Ruhe\", min = 0, max = 1, value = 0.4, step = 0.1),\n      sliderInput(\"time_delay\", \"Zeitverzögerung_fast\", min = 0, max = 300, value = 10, step = 1),\n      sliderInput(\"VO2_slow\", \"V̇O2_slow\", min = 0.0, max = 7.0, value = 0.1, step = 0.1),\n      sliderInput(\"tau_slow\", \"Tau_slow\", min = 30, max = 600, value = 180, step = 1.0),\n      sliderInput(\"time_delay_slow\", \"Zeitverzögerung_slow\", min = 0, max = 600, value = 120, step = 1),\n      actionButton(\"toggle_data\", \"Beispieldaten einfügen\"),\n      fileInput(\"file_upload\", \"CSV-Datei hochladen\", accept = \".csv\")\n    ),\n    mainPanel(\n      width = 9,\n      plotlyOutput(\"plot\")\n    )\n  )\n)\n\n# Server\nserver &lt;- function(input, output, session) {\n  show_data &lt;- reactiveVal(FALSE)\n  uploaded_data &lt;- reactiveVal(NULL)\n  \n  observeEvent(input$toggle_data, {\n    show_data(!show_data())\n  })\n  \n  observeEvent(input$file_upload, {\n    req(input$file_upload)\n    df &lt;- read.csv(input$file_upload$datapath)\n    if (\"t_s\" %in% names(df) && \"VO2_t\" %in% names(df)) {\n      uploaded_data(df)\n      show_data(TRUE)\n    } else {\n      showModal(modalDialog(\n        title = \"Invalid CSV\",\n        \"Die csv-Datei muss 't_s' und 'VO2_t' als Spaltennamen beinhalten.\",\n        easyClose = TRUE,\n        footer = NULL\n      ))\n    }\n  })\n  \n  observe({\n    if (input$VO2_Start &lt; input$VO2_Ruhe) {\n      updateSliderInput(session, \"VO2_Start\", value = input$VO2_Ruhe)\n    }\n  })\n  \n  output$plot &lt;- renderPlotly({\n    VO2 &lt;- input$VO2\n    tau_fast &lt;- input$tau_fast\n    VO2_slow &lt;- input$VO2_slow\n    tau_slow &lt;- input$tau_slow\n    VO2_Start &lt;- input$VO2_Start\n    t_delay &lt;- input$time_delay\n    t_delay_slow &lt;- input$time_delay_slow\n    VO2_Ruhe &lt;- input$VO2_Ruhe\n    \n    model_function &lt;- function(t_s, VO2, tau_fast, VO2_slow, tau_slow, VO2_Start, t_delay, t_delay_slow) {\n      VO2 * (1 - exp(-(t_s - t_delay) / tau_fast)) + \n        VO2_slow * (1 - exp(-(t_s - t_delay_slow) / tau_slow)) + \n        VO2_Start\n    }\n    \n    model_fast &lt;- function(t_s, VO2, tau_fast, t_delay) {\n      VO2 * (1 - exp(-(t_s - t_delay) / tau_fast))\n    }\n    \n    model_slow &lt;- function(t_s, VO2_slow, tau_slow, t_delay_slow) {\n      pmax(VO2_slow * (1 - exp(-(t_s - t_delay_slow) / tau_slow)), 0)\n    }\n    \n    Beispieldaten &lt;- if (show_data() && !is.null(uploaded_data())) {\n      uploaded_data()\n    } else {\n      data.frame(t_s = t_data, VO2_t = VO2_data)\n    }\n    \n    max_t &lt;- max(Beispieldaten$t_s, na.rm = TRUE)\n    max_x &lt;- max_t * 1.05\n    t_s &lt;- seq(0, max_x * 1.20, by = 1)\n    \n    model_values &lt;- ifelse(t_s &gt;= t_delay, model_function(t_s, VO2, tau_fast, VO2_slow, tau_slow, VO2_Start, t_delay, t_delay_slow), NA)\n    fast_values &lt;- ifelse(t_s &gt;= t_delay, model_fast(t_s, VO2, tau_fast, t_delay), NA)\n    slow_values &lt;- ifelse(t_s &gt;= t_delay_slow, model_slow(t_s, VO2_slow, tau_slow, t_delay_slow), NA)\n    \n    max_y &lt;- max(Beispieldaten$VO2_t, na.rm = TRUE) * 1.05\n    \n    eq_text &lt;- sprintf(\"V̇O₂ = %.2f * (1 - e&lt;sup&gt;-(t - %.2f) / %.2f&lt;/sup&gt;) + %.2f * (1 - e&lt;sup&gt;-(t - %.2f) / %.2f&lt;/sup&gt;) + %.2f\",\n                       VO2, t_delay, tau_fast, VO2_slow, t_delay_slow, tau_slow, VO2_Start)\n    t_halb &lt;- tau_fast * log(2)\n    \n    shapes &lt;- list(\n      list(\n        type = \"line\", x0 = t_delay, x1 = t_delay, y0 = 0, y1 = max_y * 1.2,\n        line = list(color = \"gray\", width = 1, dash = \"dash\")\n      ),\n      list(\n        type = \"line\", x0 = t_delay_slow, x1 = t_delay_slow, y0 = 0, y1 = max_y * 1.2,\n        line = list(color = \"gray\", width = 1, dash = \"dash\")\n      )\n    )\n    \n    p &lt;- plot_ly() %&gt;%\n      add_trace(x = ~t_s, y = ~model_values, type = 'scatter', mode = 'lines',\n                name = 'V̇O2-Modellfunktion', line = list(color = '#EF6F6A')) %&gt;%\n      add_trace(x = ~t_s, y = ~fast_values, type = 'scatter', mode = 'lines', \n                name = 'V̇O&lt;sub&gt;2&lt;/sub&gt;&lt;sub&gt;fast&lt;/sub&gt;', line = list(color = '#42BA97')) %&gt;%\n      add_trace(x = ~t_s, y = ~slow_values, type = 'scatter', mode = 'lines', \n                name = 'V̇O&lt;sub&gt;2&lt;/sub&gt;&lt;sub&gt;slow&lt;/sub&gt;', line = list(color = '#BB7693')) %&gt;%\n      layout(title = \"Biexponentielle V̇O&lt;sub&gt;2&lt;/sub&gt;-Modellfunktion\",\n             margin = list(t = 40),\n             xaxis = list(title = \"t [s]\"),\n             yaxis = list(title = \"V̇O&lt;sub&gt;2&lt;/sub&gt; [l·min&lt;sup&gt;-1&lt;/sup&gt;]\", tickformat = \".1f\"),\n             shapes = shapes,\n             annotations = list(\n               list(\n                 x = max_x * 0.20,\n                 y = max_y * 0.3,\n                 text = eq_text,\n                 showarrow = FALSE,\n                 xanchor = 'left',\n                 yanchor = 'bottom',\n                 font = list(\n                   family = \"Arial, sans-serif\",\n                   size = 10,\n                   color = \"black\"\n                 )\n               ),\n               list(\n                 x = max_x * 0.2,\n                 y = max_y * 0.1,\n                 text = paste(\"T&lt;sub&gt;1/2&lt;/sub&gt;:\", round(t_halb, 1)),\n                 showarrow = FALSE,\n                 xanchor = 'left',\n                 yanchor = 'bottom',\n                 font = list(\n                   family = \"Arial, sans-serif\",\n                   size = 10,\n                   color = \"black\"\n                 )\n               ),\n               list(\n                 x = t_delay, y = max_y * 0.9, text = sprintf(\"t&lt;sub&gt;delay&lt;/sub&gt;: %.1f\", t_delay), showarrow = FALSE, xanchor = \"left\", yanchor = \"bottom\",\n                 textangle = -90, font = list(size = 11)\n               ),\n               list(\n                 x = t_delay_slow, y = max_y * 0.9, text = sprintf(\"t&lt;sub&gt;delay_slow&lt;/sub&gt;: %.1f\", t_delay_slow), showarrow = FALSE, xanchor = \"left\", yanchor = \"bottom\",\n                 textangle = -90, font = list(size = 11)\n               )\n             )) %&gt;%\n      add_trace(x = ~t_s, y = ~rep(VO2_Ruhe, length(t_s)), type = 'scatter', mode = 'lines',\n                name = 'V̇O&lt;sub&gt;2, Ruhe&lt;/sub&gt;', line = list(color = '#1CADE4'))\n    \n    if (show_data()) {\n      data_subset &lt;- Beispieldaten[Beispieldaten$t_s &gt;= t_delay & Beispieldaten$t_s &lt;= max_t, ]\n      model_values_at_data &lt;- model_function(data_subset$t_s, VO2, tau_fast, VO2_slow, tau_slow, VO2_Start, t_delay, t_delay_slow)\n      \n      ss_res &lt;- sum((data_subset$VO2_t - model_values_at_data)^2, na.rm = TRUE)\n      ss_tot &lt;- sum((data_subset$VO2_t - mean(data_subset$VO2_t, na.rm = TRUE))^2, na.rm = TRUE)\n      r_squared &lt;- 1 - (ss_res / ss_tot)\n    \n      p &lt;- p %&gt;%\n        add_trace(data = Beispieldaten, x = ~t_s, y = ~VO2_t, type = 'scatter', mode = 'markers+lines',\n                  name = 'V̇O&lt;sub&gt;2&lt;/sub&gt;', \n                  marker = list(color = 'rgba(38, 131, 198, 0.9)', size = 5.0),\n                  line = list(color = 'rgba(38, 131, 198, 1.0)', width = 0.65, dash = '4 4')) %&gt;%\n        layout(annotations = list(\n          list(\n            x = max_x * 0.2,\n            y = max_y * 0.2,\n            text = sprintf(\"R²: %.3f\", r_squared),\n            showarrow = FALSE,\n            xanchor = 'left',\n            yanchor = 'bottom',\n            font = list(\n              family = \"Arial, sans-serif\",\n              size = 10,\n              color = \"black\"\n            )\n          )\n        ))\n    }\n    \n    p\n  })\n}\n\n# App ausführen\nshinyApp(ui = ui, server = server)\n\n\n3 Anpassbarer und ausführbarer R-Code mit webR eines des Sauerstoffvolumenstrom-Verlaufs in Abhängigkeit von der Zeit während der Belastung\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "VO2-Modellfunktion"
    ]
  },
  {
    "objectID": "EPOC.html",
    "href": "EPOC.html",
    "title": "EPOC-Modellfunktion",
    "section": "",
    "text": "1 Modellfunktion des EPOC in Abhängigkeit von der Zeit während der Belastung\n#| standalone: true\n#| viewerHeight: 1200\nlibrary(shiny)\nlibrary(plotly)\nlibrary(minpack.lm)\nlibrary(dplyr)\nlibrary(shinyjs)\n\n# Beispieldaten\nt_data &lt;- c(0, 1.2, 2.3, 3.6, 4.7, 5.9, 7, 8.1, 9.3, 10.5, 11.6, 12.8, 14, 15.3, 16.6, 18.2, 19.4, 20.7, 22.7, 23.9, 25.3, 26.7, 28.1, 29.6, 31, 32.5, 34.1, 35.5, 36.9, 38.3, 39.7, 41.2, 42.6, 44.4, 45.7, 47.9, 49.2, 50.4, 51.8, 53.7, 55, 56.3, 58, 59.5, 62.1, 63.8, 65.3, 66.8, 68.1, 69.6, 71, 72.4, 74, 75.4, 77.8, 79.2, 80.5, 81.9, 83.3, 84.8, 86.2, 87.6, 88.9, 90.3, 92, 93.5, 94.9, 96.2, 97.6, 98.8, 100.3, 101.8, 103.4, 104.7, 107.9, 109.4, 111, 112.6, 114.1, 115.5, 117.2, 118.9, 120.6, 122, 123.3, 124.8, 127.8, 129.6, 131, 132.6, 134.1, 135.5, 137, 138.4, 139.7, 140.9, 142.2, 143.6, 145, 146.2, 147.2, 148.6, 149.8, 150.9, 152.3, 153.9, 155.5, 156.8, 158.2, 160.5, 162, 164.6, 167.4, 170.8, 172.5, 174.3, 175.8, 177.6, 179.2, 180.6, 182.1, 185.5, 187, 188.5, 190, 191.6, 193.3, 195, 196.6, 198.4, 200, 201.8, 203.4, 205, 207.1, 208.9, 210.5, 212, 214, 215.6, 217.5, 219.4, 221.6, 223.2, 225.1, 226.6, 227.8, 229.1, 230.1, 231.4, 233.3, 234.9, 236.5, 238.1, 239.6, 241.3, 242.7, 245.1, 246.6, 248.6, 250.9, 253, 254.4, 256.1, 257.4, 260.3, 263.4, 265, 266.5, 268.1, 269.8, 271.7, 273.2, 274.8, 276.6, 278.3, 280.6, 282.3, 285.9, 287.6, 289.2, 290.7, 292.4, 294.3, 296, 297.6, 299.4, 301, 302.5, 304.1, 306.8, 308.6, 310.4, 312.8, 314.8, 316.9, 318.8, 320.9, 322.7, 324.4, 327.6, 330.5, 332.3, 334.1, 336.1, 338, 339.7, 341.4, 342.9, 344.5, 346.1, 347.8, 349.2, 350.7, 352.5, 354.3, 355.5, 357, 358.3, 359.8, 360.7, 361.7, 363.6, 365.3, 366.9, 368.4, 370, 371.6, 373, 376.6, 378.3, 382.2, 383.8, 385.4, 386.8, 388.6, 390.2, 391.8, 393.4, 394.9, 396.5, 398.1, 399.9, 401.6, 403.3, 405.9, 407.6, 409.6, 410.7, 412.2, 414.6, 415.7, 417.2, 418.4, 420, 421.7, 423.5, 425.2, 427, 429.1, 432.8, 434.5, 437.9, 439.7, 441.3, 442.9, 444.4, 445.6, 447.4, 448.7, 451.2, 453, 454.6, 456, 457.3, 458.6, 459.7, 461.3, 462.9, 463.7, 467.7, 469, 470.8, 471.9, 473.2, 473.9, 475, 476.4, 480.2, 481, 484.7, 486.1, 487.5, 492.3, 494, 495.9, 499.4, 501, 502.7, 504.4, 506.3, 508.3, 509.7, 510.7, 512.4, 514.5, 516.3, 518, 519.7, 521.6, 523.3, 524.9, 526.3, 528, 529.6, 531.3, 533.1, 534.8, 536.6, 538.4, 541.6, 543.4, 545, 546.9, 548.8, 550.6, 552.6, 554.3, 556.1, 557.9, 559.6, 561.5, 563.2, 564.8, 566.3, 567.8, 569, 570.5, 572.3, 573.9, 575.6, 577.5, 579.2, 581.9, 583.3, 585.5, 587.2, 589.2, 591.8, 594.2, 596, 600.2, 602.2, 604.2, 606, 609.8, 611.8, 613.7, 615.7, 617.5, 619.6, 621.3, 623.1, 624.7, 626.5, 628.3, 630, 631.7, 633.6, 635.5, 637.6, 639.6, 641.7, 643.4, 645.3, 647.1, 649, 650.7, 652.4, 654.2, 656.1, 658, 659.8, 661.5, 663.3, 665, 666.9, 669.1, 670.8, 672.6, 675.6, 677.4, 679.6, 681.6, 684.2, 685.9, 688, 690.5, 692.4, 694.9, 697.5, 699.4, 701.6, 703.7, 706.1, 708.1, 710, 712.1, 715.6, 717.7, 719.8, 722.1, 724.2, 726.4, 728.6, 730.5, 734.6, 736.8, 738.7, 740.5, 742.2, 744, 745.8, 747.6, 749.5, 751.8, 753.7, 755.8, 757.9, 759.8, 761.9, 763.9, 766.2, 768.5, 770.6, 773.1, 775.3, 777.3, 779.6, 781.5, 783.5, 785.4, 787.3, 789.3, 792.5, 795, 797.2, 799.2, 801, 802.9, 804.9, 806.5, 808.2, 810.3, 812.2, 814.3, 818.3, 820.3, 823.4, 826.8, 829.5, 831.8, 834, 836.7, 839, 841.1, 843.4, 845.6, 847.7, 850.1, 852.4, 854.5, 856.8, 859.1, 861.8, 864.1, 866, 868.1, 870.5, 873.1, 875.6, 878.1, 881.2, 884.6, 889.2, 891.6, 894.1, 896.7, 899.3)\nVO2_data &lt;- c(3.624, 3.734, 3.714, 3.494, 3.8, 3.803, 3.736, 3.534, 3.644, 3.583, 3.606, 3.459, 3.203, 3.376, 3.272, 3.392, 3.555, 3.283, 2.984, 3.042, 3.161, 3.212, 3.075, 3.163, 3.067, 3.181, 2.952, 2.929, 3.116, 2.828, 2.805, 2.768, 2.768, 2.576, 2.186, 2.014, 2.914, 2.692, 2.659, 2.304, 2.197, 2.347, 2.17, 2.038, 1.463, 2.492, 2.307, 2.083, 1.997, 2.002, 1.974, 1.847, 1.737, 1.693, 1.576, 1.375, 1.588, 1.701, 1.75, 1.632, 1.725, 1.606, 1.655, 1.665, 1.408, 1.638, 1.592, 1.61, 1.537, 1.441, 1.548, 1.564, 1.69, 1.395, 0.969, 1.977, 1.927, 1.602, 1.589, 1.498, 1.512, 1.413, 1.448, 1.536, 1.434, 1.473, 1.369, 1.019, 1.182, 1.44, 1.548, 1.329, 1.112, 1.398, 1.317, 1.429, 1.356, 1.509, 1.427, 0.864, 1.102, 1.12, 1.943, 1.636, 1.943, 1.738, 1.5, 1.01, 0.498, 1.974, 1.618, 1.571, 1.441, 0.833, 1.378, 1.557, 1.543, 1.305, 1.27, 1.379, 1.227, 1.29, 1.206, 1.329, 1.433, 1.253, 1.072, 1.218, 1.419, 1.51, 1.309, 1.117, 1.218, 1.259, 1.603, 0.856, 1.175, 1.473, 1.393, 1.405, 0.982, 0.815, 0.929, 1.033, 1.636, 1.382, 1.295, 1.278, 0.789, 1.35, 0.963, 0.582, 1.24, 1.013, 0.727, 1.126, 1.348, 0.504, 0.941, 1.153, 1.336, 1.391, 2.357, 1.859, 1.196, 1.536, 0.834, 1.612, 1.631, 1.752, 1.375, 1.349, 1.47, 1.33, 1.396, 1.467, 1.491, 1.47, 0.746, 1.638, 1.664, 1.339, 1.133, 1.256, 1.094, 1.199, 1.078, 1.404, 1.289, 1.199, 1.491, 0.719, 0.904, 0.565, 0.814, 0.922, 1.465, 0.963, 1.657, 1.801, 0.844, 0.82, 1.202, 1.173, 1.227, 1.037, 1.376, 0.964, 1.809, 1.75, 1.497, 1.215, 1.36, 1.371, 0.872, 1.017, 1.67, 1.273, 1.337, 1.267, 0.584, 1.227, 1.164, 1.206, 1.283, 1.121, 1.108, 1.167, 0.965, 0.439, 1.376, 1.381, 1.128, 0.828, 1.135, 0.87, 1.16, 1.195, 1.454, 1.139, 0.988, 1.143, 0.937, 1.17, 1.175, 0.704, 1.218, 1.274, 0.859, 1.019, 1.189, 1.556, 1.75, 1.227, 1.227, 1.262, 1.31, 1.378, 1.157, 1.138, 1.248, 0.776, 0.702, 1.252, 1.308, 1.476, 1.277, 0.88, 1.174, 1.135, 1.058, 0.609, 0.724, 1.632, 1.352, 1.866, 1.632, 0.791, 1.142, 0.748, 0.649, 1.224, 1.028, 1.042, 1.185, 1.207, 0.912, 1.722, 0.656, 1.147, 0.852, 2.311, 2.267, 0.825, 1.665, 1.219, 1.532, 1.203, 1.145, 0.982, 1.059, 1.314, 0.678, 0.736, 1.565, 1.006, 0.791, 1.166, 1.134, 0.982, 1.168, 0.985, 1.127, 1.23, 0.969, 1.171, 0.9, 1.159, 1.115, 1.368, 0.55, 0.911, 1.329, 1.333, 1.288, 1.026, 1.142, 0.938, 1.214, 1.182, 1.09, 0.731, 0.806, 1.052, 1.378, 1.204, 1.103, 0.856, 1.27, 1.18, 1.222, 1.206, 1.204, 1.237, 1.111, 1.037, 1.271, 1.031, 0.907, 1.238, 0.968, 0.688, 1.158, 1.115, 1.299, 1.372, 0.663, 0.703, 1.158, 1.331, 1.247, 1.122, 1.318, 1.442, 0.828, 1.057, 1.158, 1.416, 0.966, 1.152, 1.008, 1.056, 1.495, 1.023, 1.087, 1.116, 1.169, 1.318, 1.287, 1.189, 1.068, 0.756, 1.136, 1.221, 1.203, 1.037, 1.107, 1.314, 0.933, 1.095, 0.609, 1.18, 0.911, 1.296, 1.121, 1.087, 1.259, 0.871, 1.144, 1.326, 0.644, 1.299, 0.739, 0.937, 0.719, 1.28, 1.073, 0.931, 0.644, 1.127, 1.172, 1.099, 1.225, 1.105, 0.986, 1.27, 1.496, 0.855, 0.8, 1.091, 1.233, 1.216, 1.103, 1.067, 1.073, 0.776, 1.03, 0.947, 1.354, 0.899, 0.989, 0.951, 0.973, 0.955, 0.96, 0.934, 0.709, 1.235, 1.477, 1.246, 0.885, 0.776, 1.12, 1.094, 1.186, 0.696, 0.687, 1.099, 1.179, 1.212, 0.898, 0.925, 1.242, 0.924, 0.99, 1.399, 0.742, 1.048, 1.424, 0.902, 0.466, 0.908, 1.02, 0.914, 1.021, 1.009, 1.544, 1.343, 1.144, 1.225, 0.949, 1.013, 1.137, 1.05, 0.531, 0.696, 0.953, 1.116, 1.033, 0.797, 0.982, 0.799, 0.889, 0.62, 1.302, 0.76, 0.702, 0.583, 0.671)\n\n# Modellfunktion\nmodel_function &lt;- function(t_s, A, TauA, B, TauB, C, t_delay) {\n  A * exp(-(t_s - t_delay) / TauA) + B * exp(-(t_s - t_delay) / TauB) + C\n}\n\n# UI\nui &lt;- fluidPage(\n  useShinyjs(),\n  tags$head(\n    tags$style(HTML(\"\n      .sidebar { width: 300px; }\n      .main-content { margin-left: 310px; }\n    \"))\n  ),\n  titlePanel(\"EPOC-Modellfunktion\"),\n  sidebarLayout(\n    sidebarPanel(\n      width = 3,\n      style = \"position: fixed; height: 100vh; overflow-y: auto;\",\n      class = \"sidebar\",\n      tags$h4(tags$strong(\"Modellparameter:\")),\n      sliderInput(\"A\", \"A\", min = 0.0, max = 6, value = 2.2, step = 0.01),\n      sliderInput(\"TauA\", \"TauA\", min = 5, max = 90, value = 35, step = 0.10),\n      sliderInput(\"B\", \"B\", min = 0.0, max = 5, value = 0.8, step = 0.01),\n      sliderInput(\"TauB\", \"TauB\", min = 0.0, max = 1800, value = 180, step = 0.10),\n      sliderInput(\"C\", \"C\", min = 0.0, max = 3.0, value = 0.90, step = 0.01),\n      sliderInput(\"O2_Store\", \"O2-Speicher [l]\", min = 0, max = 1, value = 0.4, step = 0.01),\n      sliderInput(\"t_delay\", \"Zeitverzögerung [s]\", min = 0, max = 300, value = 0, step = 1),\n      sliderInput(\"VO2_Ruhe\", \"VO2 Ruhe [l · min^-1]\", min = 0.0, max = 1.0, value = 0.3, step = 0.01),\n      br(),\n      actionButton(\"toggle_data\", \"Beispieldaten anzeigen\"),\n      br(),\n      fileInput(\"file_upload\", \"CSV-Datei hochladen\", accept = \".csv\"),\n      tags$h4(tags$strong(\"Modelanpassung:\")),\n      actionButton(\"fit_all\", \"nlsLM - Fit\"),\n      h4(\"Schrittweise:\"),\n      actionButton(\"fit_tau\", \"1. Fit: Tau\"),\n      actionButton(\"fit_slow\", \"2. Fit: EPOC Slow\"),\n      actionButton(\"fit_full\", \"3. Fit: EPOC Fast\"),\n      br(),\n      actionButton(\"toggle_view\", \"Ruhe_sim anzeigen\"),\n      br(),\n      tags$h4(tags$strong(\"Berechnung - Ruhesauerstoffaufnahme:\")),\n      radioButtons(\"geschlecht\", \"Geschlecht:\", choices = c(\"Männlich\", \"Weiblich\")),\n      sliderInput(\"koerpermasse\", \"Körpermasse [kg]:\", min = 40, max = 150, value = 75),\n      sliderInput(\"koerperlaenge\", \"Körperlänge [cm]:\", min = 140, max = 220, value = 180),\n      sliderInput(\"alter\", \"Alter [Jahre]:\", min = 18, max = 100, value = 25),\n      sliderInput(\"rq\", \"RQ:\", min = 0.7, max = 1.0, value = 0.77, step = 0.01),\n      actionButton(\"berechne_vo2_ruhe\", \"VO2 Ruhe berechnen\")\n    ),\n    mainPanel(\n      class = \"main-content\",\n      plotlyOutput(\"plot\", height = \"600px\"),\n      htmlOutput(\"instructions\")\n    )\n  )\n)\n\n\n\nserver &lt;- function(input, output, session) {\n  show_data &lt;- reactiveVal(FALSE)\n  uploaded_data &lt;- reactiveVal(NULL)\n  tau_estimate &lt;- reactiveVal(NULL)\n  slow_estimates &lt;- reactiveVal(NULL)\n  show_full_view &lt;- reactiveVal(FALSE)\n  max_ruhe_t_s &lt;- reactiveVal(NULL)\n  ruhe_sim &lt;- reactiveVal(NULL)\n  \n  observeEvent(input$toggle_data, {\n    show_data(!show_data())\n  })\n  \n  observeEvent(input$file_upload, {\n    req(input$file_upload)\n    df &lt;- read.csv(input$file_upload$datapath)\n    \n    if (\"t_s\" %in% names(df) && \"VO2_t\" %in% names(df)) {\n      if (df$t_s[1] != 0.0) {\n        df$t_s &lt;- df$t_s - df$t_s[1]\n      }\n      \n      uploaded_data(df)\n      show_data(TRUE)\n    } else {\n      showModal(modalDialog(\n        title = \"Invalid CSV\",\n        \"Die CSV-Datei muss 't_s' und 'VO2_t' als Spaltennamen beinhalten.\",\n        easyClose = TRUE,\n        footer = NULL\n      ))\n    }\n  })\n  \n  # Funktion zur Berechnung des Grundumsatzes\n  berechne_grundumsatz &lt;- function(geschlecht, masse, laenge, alter) {\n    if (geschlecht == \"Männlich\") {\n      return(66.5 + (13.75 * masse) + (5.003 * laenge) - (6.775 * alter))\n    } else {\n      return(655.1 + (9.563 * masse) + (1.850 * laenge) - (4.676 * alter))\n    }\n  }\n  \n  # Funktion zur Berechnung des RMR\n  berechne_rmr &lt;- function(grundumsatz, rq, geschlecht) {\n    ka &lt;- 19.946  # Annahme für RQ = 0.77, passen Sie dies an, wenn nötig\n    faktor &lt;- if(geschlecht == \"Männlich\") 1.287 else 1.278\n    return((grundumsatz / (24 * 60 * ka)) * 4.1868 * faktor)\n  }\n  \n  # Reaktion auf den Klick des \"VO2,Ruhe berechnen\" Buttons\n  observeEvent(input$berechne_vo2_ruhe, {\n    grundumsatz &lt;- berechne_grundumsatz(\n      input$geschlecht,\n      input$koerpermasse,\n      input$koerperlaenge,\n      input$alter\n    )\n    \n    rmr &lt;- berechne_rmr(grundumsatz, input$rq, input$geschlecht)\n    \n    # Aktualisieren Sie den VO2_Ruhe Slider mit dem berechneten Wert\n    updateSliderInput(session, \"VO2_Ruhe\", value = round(rmr, 3))\n    \n    # Zeigen Sie eine Benachrichtigung mit dem berechneten Wert an\n    showNotification(paste(\"Berechnete Ruhesauerstoffaufnahme:\", round(rmr, 3), \"l/min\"), type = \"message\")\n  })\n  \n  observeEvent(input$fit_tau, {\n    if (show_data()) {\n      Beispieldaten &lt;- if (is.null(uploaded_data())) {\n        data.frame(t_s = t_data, VO2_t = VO2_data)\n      } else {\n        uploaded_data()\n      }\n      \n      t_delay &lt;- isolate(input$t_delay)\n      C &lt;- isolate(input$VO2_Ruhe)\n      \n      # Datenfilterung und Zeitverschiebung\n      filtered_data &lt;- Beispieldaten %&gt;%\n        filter(t_s &gt;= t_delay) %&gt;%\n        mutate(t_s = t_s - t_delay)\n      \n      model_tau &lt;- nlsLM(VO2_t ~ x * exp(-t_s/Tau) + C, \n                         data = filtered_data,\n                         start = list(x = max(filtered_data$VO2_t), Tau = 45, C = C),\n                         lower = c(x = 0, Tau = 10, C = 0),\n                         upper = c(x = Inf, Tau = 600, C = Inf),\n                         control = nls.lm.control(maxiter = 1024, ftol = 1e-10, ptol = 1e-10))\n      \n      tau_estimate(round(as.list(coef(model_tau))$Tau, 1))\n      \n      updateSliderInput(session, \"TauA\", value = tau_estimate())\n      updateSliderInput(session, \"A\", value = as.list(coef(model_tau))$x)\n      updateSliderInput(session, \"C\", value = as.list(coef(model_tau))$C)\n      \n      # Set B and TauB sliders to 0\n      updateSliderInput(session, \"B\", value = 0)\n      updateSliderInput(session, \"TauB\", value = 0)\n    }\n  })\n\n  \n  observeEvent(input$fit_slow, {\n    req(tau_estimate())\n    if (show_data()) {\n      Beispieldaten &lt;- if (is.null(uploaded_data())) {\n        data.frame(t_s = t_data, VO2_t = VO2_data)\n      } else {\n        uploaded_data()\n      }\n      \n      VO2_Ruhe &lt;- isolate(input$VO2_Ruhe)\n      t_delay &lt;- isolate(input$t_delay)\n      max_VO2 &lt;- max(VO2_data) * 1.1\n      \n      tau2 &lt;- 2 * tau_estimate()\n      tau8 &lt;- 8 * tau_estimate()\n      \n      simulierte_ruhewerte &lt;- seq(1800, 2400, by = 1)\n      ruhe_sim_data &lt;- data.frame(\n        t_s = simulierte_ruhewerte,\n        VO2_t = rep(VO2_Ruhe, length(simulierte_ruhewerte))\n      )\n      \n      ruhe_sim(ruhe_sim_data)\n      max_ruhe_t_s(max(ruhe_sim_data$t_s))\n      \n      Beispieldaten_extended &lt;- rbind(Beispieldaten, ruhe_sim_data)\n      \n      # Datenfilterung und Zeitverschiebung\n      filtered_data &lt;- Beispieldaten_extended %&gt;% \n        filter(t_s &gt;= t_delay) %&gt;%\n        mutate(t_s = t_s - t_delay) %&gt;%\n        filter((t_s &gt;= tau2 & t_s &lt;= tau8) | t_s &gt;= 1800)\n      \n      model_slow &lt;- nlsLM(VO2_t ~ B * exp(-t_s/TauB) + VO2_Ruhe,\n                          data = filtered_data,\n                          start = list(B = 0.5, TauB = 540),\n                          lower = c(B = 0.2, TauB = 180),\n                          upper = c(B = (max_VO2 * 0.5), TauB = 900),\n                          control = nls.lm.control(maxiter = 1024, ftol = 1e-10, ptol = 1e-10))\n      \n      slow_estimates_list &lt;- list(\n        B = as.numeric(coef(model_slow)[\"B\"]),\n        TauB = round(as.numeric(coef(model_slow)[\"TauB\"]), 1),\n        C = VO2_Ruhe\n      )\n      \n      slow_estimates(slow_estimates_list)\n      \n      updateSliderInput(session, \"B\", value = slow_estimates_list$B)\n      updateSliderInput(session, \"TauB\", value = slow_estimates_list$TauB)\n      updateSliderInput(session, \"C\", value = VO2_Ruhe)\n    }\n  })\n  \n  observeEvent(input$fit_full, {\n    req(tau_estimate(), slow_estimates())\n    if (show_data()) {\n      Beispieldaten &lt;- if (is.null(uploaded_data())) {\n        data.frame(t_s = t_data, VO2_t = VO2_data)\n      } else {\n        uploaded_data()\n      }\n      \n      slow_est &lt;- slow_estimates()\n      t_delay &lt;- isolate(input$t_delay)\n      \n      if (is.null(tau_estimate()) || is.null(slow_est)) {\n        showNotification(\"Einige Schätzwerte fehlen. Bitte führen Sie Schritt 1 und 2 erneut aus.\", type = \"error\")\n        return()\n      }\n      \n      start_params &lt;- list(\n        A = isolate(input$A),\n        TauA = tau_estimate()\n      )\n      \n      # Definiere eine Funktion mit festen Werten für B, TauB und C\n      model_func &lt;- function(t_s, A, TauA) {\n        A * exp(-t_s/TauA) + slow_est$B * exp(-t_s/slow_est$TauB) + slow_est$C\n      }\n      \n      # Berechne 2tau\n      tau2 &lt;- 2 * tau_estimate()\n      \n      # Datenfilterung und Zeitverschiebung\n      Beispieldaten_gefiltert &lt;- Beispieldaten %&gt;%\n        filter(t_s &gt;= t_delay) %&gt;%\n        mutate(t_s = t_s - t_delay) %&gt;%\n        filter(t_s &lt; 1800)  # Entferne simulierte Ruhewerte\n      \n      # Erstelle Gewichte basierend auf t_s\n      weights &lt;- ifelse(Beispieldaten_gefiltert$t_s &lt;= tau2, 1, 1)\n      \n      tryCatch({\n        model_full &lt;- nlsLM(VO2_t ~ model_func(t_s, A, TauA),\n                            data = Beispieldaten_gefiltert,\n                            start = list(A = 2.5, TauA = 42),\n                            lower = c(A = 1.0, TauA = 15),\n                            upper = c(A = 4.0, TauA = 90),\n                            weights = weights,\n                            control = nls.lm.control(maxiter = 1024, ftol = 1e-10, ptol = 1e-10))\n        \n        full_estimates &lt;- list(\n          A = as.numeric(coef(model_full)[\"A\"]),\n          TauA = round(as.numeric(coef(model_full)[\"TauA\"]), 1)\n        )\n        \n        updateSliderInput(session, \"A\", value = full_estimates$A)\n        updateSliderInput(session, \"TauA\", value = full_estimates$TauA)\n        \n        showNotification(\"Fitting erfolgreich abgeschlossen\", type = \"message\")\n      }, error = function(e) {\n        showNotification(paste(\"Fehler beim Fitting:\", e$message), type = \"error\")\n      })\n    }\n  })\n  \n  observeEvent(input$toggle_view, {\n    show_full_view(!show_full_view())\n  })\n  \n  observeEvent(input$fit_all, {\n    if (show_data()) {\n      # Trigger fit_tau\n      shinyjs::click(\"fit_tau\")\n      \n      # Warte kurz, bevor der nächste Fit ausgeführt wird\n      Sys.sleep(0.5)\n      \n      # Trigger fit_slow\n      shinyjs::click(\"fit_slow\")\n      \n      # Warte kurz, bevor der nächste Fit ausgeführt wird\n      Sys.sleep(0.5)\n      \n      # Trigger fit_full\n      shinyjs::click(\"fit_full\")\n      \n      showNotification(\"Alle Fits wurden nacheinander durchgeführt.\", type = \"message\")\n    } else {\n      showNotification(\"Bitte fügen Sie zuerst Daten ein.\", type = \"warning\")\n    }\n  })\n  \n  output$plot &lt;- renderPlotly({\n    A &lt;- input$A\n    TauA &lt;- input$TauA\n    B &lt;- input$B\n    TauB &lt;- input$TauB\n    C &lt;- input$C\n    O2_Store &lt;- input$O2_Store\n    t_delay &lt;- input$t_delay\n    VO2_Ruhe &lt;- input$VO2_Ruhe\n    \n    # Bestimmen des x-Achsen-Bereichs\n    x_range &lt;- if (show_full_view()) {\n      c(0, max_ruhe_t_s())\n    } else {\n      c(0, 600)\n    }\n    \n    max_x &lt;- max(max_ruhe_t_s(), 600 + 0.5 * TauB, max(t_data))\n    \n    VO2_data &lt;- if (show_data()) {\n      if (is.null(uploaded_data())) {\n        VO2_data\n      } else {\n        uploaded_data()$VO2_t\n      }\n    } else {\n      VO2_data\n    }\n    \n    max_y &lt;- max((A + B + C) * 1.1, max(VO2_data) * 1.1)\n    \n    t_s &lt;- seq(0, max_x, by = 1)\n    \n    model_values &lt;- A * exp(-t_s / TauA) + B * exp(-t_s / TauB) + C\n    model_fast &lt;- A * exp(-t_s / TauA)\n    model_slow &lt;- B * exp(-t_s / TauB)\n    model_ruhe &lt;- rep(C, length(t_s))\n    \n    model_fast_func &lt;- function(t_s) A * exp(-t_s / TauA)\n    integrated_model_fast &lt;- integrate(model_fast_func, lower = 0, upper = max(t_s))\n    \n    VO2_fast &lt;- integrated_model_fast$value / 60\n    CE_max &lt;- 21.1307796\n    WPCR &lt;- VO2_fast * CE_max\n    WPCR_corrected &lt;- ifelse(VO2_fast &lt; O2_Store, 0, (VO2_fast * CE_max) - (O2_Store * CE_max))\n    \n    cumulative_area &lt;- cumsum(A * exp(-t_s / TauA)) * diff(t_s)[1]\n    O2_Store_index &lt;- which.min(abs(cumulative_area - O2_Store * 60))\n    O2_Store_x &lt;- t_s[O2_Store_index]\n    \n    eq_text &lt;- sprintf(\"V̇O₂ = %.2f * e&lt;sup&gt;-t / %.1f&lt;/sup&gt; + %.2f * e&lt;sup&gt;-t / %.1f&lt;/sup&gt; + %.2f\", \n                       A, TauA, B, TauB, C)\n    \n    p &lt;- plot_ly() %&gt;%\n      add_trace(x = ~t_s, y = ~model_values, type = 'scatter', mode = 'lines', \n                name = 'Modellfunktion', line = list(color = '#EF6F6A')) %&gt;%\n      add_trace(x = ~t_s, y = ~model_fast, type = 'scatter', mode = 'lines', \n                name = 'EPOC&lt;sub&gt;fast&lt;/sub&gt;', line = list(color = '#42BA97')) %&gt;%\n      add_trace(x = ~t_s, y = ~model_slow, type = 'scatter', mode = 'lines', \n                name = 'EPOC&lt;sub&gt;slow&lt;/sub&gt;', line = list(color = '#BB7693')) %&gt;%\n      add_trace(x = ~t_s, y = ~model_ruhe, type = 'scatter', mode = 'lines', \n                name = 'C', line = list(color = '#1CADE4')) %&gt;%\n      add_ribbons(x = ~t_s, ymin = 0, ymax = ~model_fast, \n                  name = 'EPOC&lt;sub&gt;fast,Integriert&lt;/sub&gt;', fillcolor = 'rgba(66,186,151,0.5)', \n                  line = list(color = \"rgba(0,0,0,0)\")) %&gt;%\n      add_ribbons(x = ~t_s, ymin = 0, ymax = ~model_fast, \n                  data = data.frame(t_s = t_s[1:O2_Store_index], model_fast = model_fast[1:O2_Store_index]),\n                  fillcolor = 'rgba(0,131,143,0.3)', line = list(color = \"rgba(0,0,0,0)\", dash = \"dash\"), \n                  name = 'O&lt;sub&gt;2&lt;/sub&gt;-Speicher') %&gt;%\n      add_trace(x = c(O2_Store_x, O2_Store_x), y = c(0, max(model_fast[O2_Store_index])),\n                type = 'scatter', mode = 'lines', \n                line = list(color = \"#00838F\", width = 1, dash = \"dash\"),\n                name = 'O2 Store Linie', showlegend = FALSE) %&gt;%\n      layout(title = \"EPOC-Modellfunktion\",\n             margin = list(t = 40),\n             xaxis = list(title = \"Zeit [s]\", range = x_range, autorange = FALSE),\n             yaxis = list(title = \"V̇O&lt;sub&gt;2&lt;/sub&gt; [l·min&lt;sup&gt;-1&lt;/sup&gt;]\", range = c(0, max_y)),\n             shapes = list(\n               list(\n                 type = \"line\",\n                 x0 = 2 * TauA,\n                 x1 = 2 * TauA,\n                 y0 = 0,\n                 y1 = max_y,\n                 line = list(color = \"gray\", width = 0.5, dash = \"dash\")\n               ),\n               list(\n                 type = \"line\",\n                 x0 = 8 * TauA,\n                 x1 = 8 * TauA,\n                 y0 = 0,\n                 y1 = max_y,\n                 line = list(color = \"gray\", width = 0.5, dash = \"dash\")\n               )\n             ),\n             annotations = list(\n               list(\n                 x = 2 * TauA, y = max_y * 0.80, text = sprintf(\"2tau: %.1f\", 2 * TauA), showarrow = FALSE, xanchor = \"left\", yanchor = \"bottom\",\n                 textangle = -90, font = list(size = 11, color = \"darkgrey\")\n               ),\n               list(\n                 x = 8 * TauA, y = max_y * 0.80, text = sprintf(\"8tau: %.1f\", 8 * TauA), showarrow = FALSE, xanchor = \"left\", yanchor = \"bottom\",\n                 textangle = -90, font = list(size = 11, color = \"darkgrey\")\n               ),\n               list(\n                 x = max_x * 0.10, \n                 y = max_y * 0.85,\n                 text = paste(\"W&lt;sub&gt;PCR&lt;/sub&gt;:\", round(WPCR, 2), \"kJ\"),\n                 showarrow = FALSE,\n                 xanchor = 'left',\n                 yanchor = 'bottom',\n                 font = list(\n                   size = 12,\n                   color = \"black\"\n                 )\n               ),\n               list(\n                 x = max_x * 0.10, \n                 y = max_y * 0.75,\n                 text = paste(\"W&lt;sub&gt;PCR, korrigiert&lt;/sub&gt;:\", round(WPCR_corrected, 2), \"kJ\"),\n                 showarrow = FALSE,\n                 xanchor = 'left',\n                 yanchor = 'bottom',\n                 font = list(\n                   size = 12,\n                   color = \"black\"\n                 )\n               ),\n               list(\n                 x = max_x * 0.10, \n                 y = max_y * 0.95,\n                 text = eq_text,\n                 showarrow = FALSE,\n                 xanchor = 'left',\n                 yanchor = 'bottom',\n                 font = list(\n                   size = 12,\n                   color = \"black\"\n                 )\n               )\n             ))\n    \n    if (show_data()) {\n      Beispieldaten &lt;- if (is.null(uploaded_data())) {\n        data.frame(t_s = t_data, VO2_t = VO2_data)\n      } else {\n        uploaded_data()\n      }\n      \n      # Datenfilterung und Zeitverschiebung\n      Beispieldaten &lt;- Beispieldaten %&gt;%\n        filter(t_s &gt;= t_delay) %&gt;%\n        mutate(t_s = t_s - t_delay) %&gt;%\n        filter(t_s &lt; 1800)  # Entferne simulierte Ruhewerte\n      \n      model_values_at_data &lt;- A * exp(-Beispieldaten$t_s / TauA) + B * exp(-Beispieldaten$t_s / TauB) + C\n      \n      data_subset &lt;- Beispieldaten\n      \n      ss_res &lt;- sum((data_subset$VO2_t - model_values_at_data)^2, na.rm = TRUE)\n      ss_tot &lt;- sum((data_subset$VO2_t - mean(data_subset$VO2_t, na.rm = TRUE))^2, na.rm = TRUE)\n      r_squared &lt;- 1 - (ss_res / ss_tot)\n      \n      p &lt;- p %&gt;%\n        add_trace(data = Beispieldaten, x = ~t_s, y = ~VO2_t, type = 'scatter', mode = 'markers+lines',\n                  name = 'V̇O&lt;sub&gt;2&lt;/sub&gt;', \n                  marker = list(color = 'rgba(38, 131, 198, 0.9)', size = 5.0),\n                  line = list(color = 'rgba(38, 131, 198, 1.0)', width = 0.65, dash = '4 4'))\n      \n      if (show_full_view()) {\n        ruhe_sim &lt;- data.frame(\n          t_s = seq(1800, max_ruhe_t_s(), by = 1),\n          VO2_t = rep(VO2_Ruhe, max_ruhe_t_s() - 1799)\n        )\n        \n        p &lt;- p %&gt;%\n          add_trace(data = ruhe_sim, x = ~t_s, y = ~VO2_t, type = 'scatter', mode = 'markers+lines',\n                    name = 'Sim. Ruhewerte', \n                    marker = list(color = '#1CADE4', size = 3.0),\n                    line = list(color = '#1CADE4', width = 0.5, dash = '4 4'))\n      }\n      \n      p &lt;- p %&gt;%\n        layout(annotations = list(\n          list(\n            x = max_x * 0.10,\n            y = max_y * 0.65,\n            text = sprintf(\"R²: %.3f\", r_squared),\n            showarrow = FALSE,\n            xanchor = 'left',\n            yanchor = 'bottom',\n            font = list(\n              family = \"Arial, sans-serif\",\n              size = 12,\n              color = \"black\"\n            )\n          )\n        ))\n    }\n    \n    p\n  })\n  \n  output$instructions &lt;- renderUI({\n    HTML(\n      \"&lt;div style='margin-top: 20px; padding: 10px; background-color: #f0f0f0; border: 1px solid #ddd; border-radius: 5px;'&gt;\n    &lt;h4 style='color: #333;'&gt;&lt;strong&gt;Anleitung - Modellanpassung:&lt;/strong&gt;&lt;/h4&gt;\n    &lt;ol style='color: #555;'&gt;\n      &lt;li&gt;Beispiel VO2-Daten oder eigene VO2-Daten als CSV-Datei einfügen.&lt;/li&gt;\n      &lt;li&gt;Ruhesauerstoffaufnahme (VO2 Ruhe) manuell eingeben oder nach Angabe der nötigen Parameter (Geschlecht, Körpermasse, Alter, RQ) berechnen lassen.&lt;/li&gt;\n      &lt;li&gt;O2-Speicher manuell festlegen oder auf 0 setzen, falls dieser in der Berechnung nicht beachtet werden soll.&lt;/li&gt;\n      &lt;li&gt;Zeitverzögerung festlegen, um Startpunkt der Modellanpassung festzulegen.&lt;/li&gt;\n      &lt;li&gt;Komplette Modellanpassung in 3 Schritten über 'nlsLM - Fit' oder schrittweise durchführen:&lt;/li&gt;\n      &lt;ul&gt;\n        &lt;li&gt;'1. Fit: Tau' Bestimmung der Zeitkonstante tau mit einfacher Exponentialfunktion.&lt;/li&gt;\n        &lt;li&gt;'2. Fit: EPOC Slow' Modellanpassung der langsamen EPOC-Komponente mit simulierten Ruhewerten.\n          &lt;ul&gt;\n            &lt;li&gt;'Ruhe_sim anzeigen' wechselt zwischen der normalen und der erweiterten Ansicht mit der Ruhesauerstoffaufnahme.&lt;/li&gt;\n          &lt;/ul&gt;\n        &lt;/li&gt;\n        &lt;li&gt;'3. Fit: EPOC Fast' Modellanpassung der schnellen EPOC-Komponente.&lt;/li&gt;\n      &lt;/ul&gt;\n      &lt;li&gt;Alternativ: Manuelle Modellanpassung der Modellparameter mit den Schiebereglern.&lt;/li&gt;\n    &lt;/ol&gt;\n    &lt;/div&gt;\"\n    )\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\n\n\n\n\n\n\nCSV-Datei hochladen\n\n\n\nVO2-Daten können als CSV-Datei im folgenden Format hochgeladen werden: t_s,VO2_t 0.0,5.479 1.0,5.251 2.3,4.829 3.5,4.746 …",
    "crumbs": [
      "EPOC-Modellfunktion"
    ]
  },
  {
    "objectID": "Laktat.html",
    "href": "Laktat.html",
    "title": "Laktat-Modellfunktionen",
    "section": "",
    "text": "1 Blutlaktat-Modellfunktion: Exponentieller Abfall nach dem Belastungsende\n#| standalone: true\n#| viewerHeight: 900\nlibrary(shiny)\nlibrary(plotly)\nlibrary(minpack.lm)\n\n# Define data\nt_s &lt;- c(23, 127, 261, 422.5, 549.8, 664.5, 795.8, 1254.9)\nBLC_t &lt;- c(10.04, 7.49, 5.18, 3.9, 2.67, 2.18, 1.64, 0.98)\n\n# New model function: A * exp(-k * (t - delay)) + BLC0\nlaktat_model_function &lt;- function(t, A, k, BLC0, delay) {\n  A * exp(-k * (t - delay)) + BLC0\n}\n\n# User interface (UI)\nui &lt;- fluidPage(\n  titlePanel(\"Exponentielles Laktat-Abbaumodell\"),\n  sidebarLayout(\n    sidebarPanel(\n      width = 3,\n      sliderInput(\"A\", \"A [mmol/l]\", min = 0.0, max = 15.0, value = 8.0, step = 0.1),\n      sliderInput(\"k\", \"k [s^-1]\", min = 0.0001, max = 0.02, value = 0.005, step = 0.0001),\n      sliderInput(\"BLC0\", \"BLC0 [mmol/l]\", min = 0.0, max = 5.0, value = 1.0, step = 0.01),\n      sliderInput(\"delay\", \"Delay [s]\", min = 0, max = 3600, value = 0, step = 0.1),\n      actionButton(\"set_delay\", \"Delay auf BLC_1\"),\n      br(), \n      actionButton(\"optimize\", \"Anpassen: nlsLM\"),\n      fileInput(\"file_upload\", \"CSV-Datei hochladen\", accept = \".csv\")\n    ),\n    mainPanel(\n      plotlyOutput(\"plot\")\n    )\n  )\n)\n\n# Server logic\nserver &lt;- function(input, output, session) {\n  # Reactive value for uploaded data\n  uploaded_data &lt;- reactiveVal(NULL)\n  \n  # Observer for CSV upload\n  observeEvent(input$file_upload, {\n    req(input$file_upload)\n    df &lt;- read.csv(input$file_upload$datapath)\n    \n    if (\"t_s\" %in% names(df) && \"BLC_t\" %in% names(df)) {\n      uploaded_data(df)\n    } else {\n      showModal(modalDialog(\n        title = \"Ungültige CSV\",\n        \"Die CSV-Datei muss 't_s' und 'BLC_t' als Spaltennamen enthalten.\",\n        easyClose = TRUE,\n        footer = NULL\n      ))\n    }\n  })\n  \n  # Observer for setting delay to first time point\n  observeEvent(input$set_delay, {\n    data &lt;- if (is.null(uploaded_data())) {\n      data.frame(t_s = t_s, BLC_t = BLC_t)\n    } else {\n      uploaded_data()\n    }\n    updateSliderInput(session, \"delay\", value = min(data$t_s))\n  })\n  \n  observeEvent(input$optimize, {\n    data &lt;- if (is.null(uploaded_data())) {\n      data.frame(t_s = t_s, BLC_t = BLC_t)\n    } else {\n      uploaded_data()\n    }\n    \n    delay &lt;- input$delay\n    \n    # Filter data points after the delay\n    data_filtered &lt;- data[data$t_s &gt; delay, ]\n    \n    if (nrow(data_filtered) &lt; 3) {\n      showNotification(\"Nicht genügend Datenpunkte nach dem Delay für den Fitting-Prozess.\", type = \"error\")\n      return()\n    }\n    \n    best_fit &lt;- NULL\n    best_rss &lt;- Inf\n    \n    withProgress(message = 'Fitting in progress', value = 0, {\n      for (i in 1:100) {\n        # Randomized starting values\n        A_start &lt;- runif(1, 0, 15)\n        k_start &lt;- runif(1, 0.0001, 0.02)\n        BLC0_start &lt;- runif(1, 0, 5)\n        \n        start_values &lt;- list(A = A_start, k = k_start, BLC0 = BLC0_start)\n        \n        model_equation &lt;- BLC_t ~ A * exp(-k * (t_s - delay)) + BLC0\n        \n        fit &lt;- try(nlsLM(model_equation,\n                         data = data_filtered,\n                         start = start_values,\n                         lower = c(A = 0, k = 0.0001, BLC0 = 0),\n                         upper = c(A = 15, k = 0.02, BLC0 = 5),\n                         control = nls.control(maxiter = 1024)), silent = TRUE)\n        \n        if (!inherits(fit, \"try-error\")) {\n          rss &lt;- sum(residuals(fit)^2)\n          if (rss &lt; best_rss) {\n            best_rss &lt;- rss\n            best_fit &lt;- fit\n          }\n        }\n        \n        incProgress(1/100, detail = paste(\"Iteration\", i))\n      }\n    })\n    \n    if (!is.null(best_fit)) {\n      params &lt;- as.list(coef(best_fit))\n      updateSliderInput(session, \"A\", value = params$A)\n      updateSliderInput(session, \"k\", value = params$k)\n      updateSliderInput(session, \"BLC0\", value = params$BLC0)\n      \n      showNotification(\"Fitting completed successfully!\", type = \"message\")\n    } else {\n      showModal(modalDialog(\n        title = \"nlsLM fehlgeschlagen\",\n        \"Die nicht-lineare Regression mit dem Levenberg-Marquardt-Algorithmus konnte nicht erfolgreich durchgeführt werden.\",\n        easyClose = TRUE,\n        footer = NULL\n      ))\n    }\n  })\n  \n  output$plot &lt;- renderPlotly({\n    A &lt;- input$A\n    k &lt;- input$k\n    BLC0 &lt;- input$BLC0\n    delay &lt;- input$delay\n    \n    data &lt;- if (is.null(uploaded_data())) {\n      data.frame(t_s = t_s, BLC_t = BLC_t)\n    } else {\n      uploaded_data()\n    }\n    \n    max_x &lt;- max(data$t_s) * 1.66\n    min_x &lt;- max(delay - 360, 0)\n    \n    t_s_modell &lt;- seq(min_x, max_x, length.out = 1000)\n    BLC_t_modell &lt;- laktat_model_function(t_s_modell, A, k, BLC0, delay)\n    \n    max_y &lt;- max(max(BLC_t_modell) * 1.1, max(data$BLC_t) * 1.1)\n    \n    # Create equation text\n    eq_text &lt;- sprintf(\"BLC(t) = %.2f * e&lt;sup&gt;-%.4f*(t-%.2f)&lt;/sup&gt; + %.3f\", A, k, delay, BLC0)\n    \n    # Calculate R²\n    data_filtered &lt;- data[data$t_s &gt; delay, ]\n    BLC_t_modell_at_data &lt;- laktat_model_function(data_filtered$t_s, A, k, BLC0, delay)\n    ss_res &lt;- sum((data_filtered$BLC_t - BLC_t_modell_at_data)^2)\n    ss_tot &lt;- sum((data_filtered$BLC_t - mean(data_filtered$BLC_t))^2)\n    r_squared &lt;- 1 - (ss_res / ss_tot)\n    \n    # Plotly plot\n    p &lt;- plot_ly() %&gt;%\n      add_trace(x = t_s_modell[t_s_modell &gt;= delay], y = BLC_t_modell[t_s_modell &gt;= delay], \n                type = 'scatter', mode = 'lines', \n                name = 'Modellfunktion', line = list(color = '#EF6F6A')) %&gt;%\n      add_trace(x = t_s_modell[t_s_modell &lt; delay], y = BLC_t_modell[t_s_modell &lt; delay], \n                type = 'scatter', mode = 'lines', \n                name = 'Modellfunktion (vor Delay)', line = list(color = '#EF6F6A', dash = 'dash')) %&gt;%\n      add_trace(x = data$t_s, y = data$BLC_t, type = 'scatter', mode = 'markers', \n                name = 'Gemessene BLC-Werte', marker = list(color = '#42BA97', size = 10, symbol = 'x')) %&gt;%\n      add_segments(x = delay, xend = delay, y = 0, yend = max_y, \n                   line = list(color = 'darkgrey', width = 1, dash = 'dash'), \n                   showlegend = FALSE, opacity = 0.75) %&gt;%\n      layout(title = \"Exponentielles Laktat-Abbaumodell\",\n             margin = list(t = 40),\n             xaxis = list(title = \"Zeit [s]\", range = c(min_x, max_x)),\n             yaxis = list(title = \"Laktat [mmol/l]\", range = c(0, max_y)),\n             annotations = list(\n               list(\n                 x = max_x * 0.5, \n                 y = max_y * 0.95,\n                 text = eq_text,\n                 showarrow = FALSE,\n                 xanchor = 'left',\n                 yanchor = 'bottom',\n                 font = list(\n                   size = 12,\n                   color = \"black\"\n                 )\n               ),\n               list(\n                 x = max_x * 0.5,\n                 y = max_y * 0.90,\n                 text = sprintf(\"R²: %.4f\", r_squared),\n                 showarrow = FALSE,\n                 xanchor = 'left',\n                 yanchor = 'bottom',\n                 font = list(\n                   size = 12,\n                   color = \"black\"\n                 )\n               )\n             ))\n    \n    p\n  })\n}\n\n# Start the app\nshinyApp(ui = ui, server = server)\n\n\n2 Blutlaktat-Bateman-Modellfunktion: Während und nach dem Belastungszeitraum\n#| standalone: true\n#| viewerHeight: 900\nlibrary(shiny)\nlibrary(plotly)\nlibrary(minpack.lm)\n\n# Definiere Daten\nt_min &lt;- c(0.4, 3.3, 6.5, 8.4, 10.2, 12.5, 14.9, 16.7, 19.3)\nBLC_t &lt;- c(0.82, 4.53, 6.97, 7.52, 7.73, 7.28, 6.37, 5.41, 4.71)\n\n# Normalisiere t_min, wenn der kleinste Wert größer als 0.0 ist\nif (min(t_min) &gt; 0.0) {\n  t_min &lt;- t_min - min(t_min)\n}\n\n# Bateman-Funktion für Laktatwerte (in Minuten) mit BLC0\nbateman_function &lt;- function(t, a, k1, k2, BLC0) {\n  BLC0 + (a * k1 / (k2 - k1)) * (exp(-k1 * t) - exp(-k2 * t))\n}\n\n# Invasions- und Eliminationsfunktionen\ninvasion_function &lt;- function(t, a, k1, BLC0) {\n  BLC0 + a * (1 - exp(-k1 * t))\n}\n\nelimination_function &lt;- function(t, a, k2, BLC0) {\n  BLC0 + a * exp(-k2 * t)\n}\n\n# Benutzeroberfläche (UI)\nui &lt;- fluidPage(\n  titlePanel(\"Bateman-Funktion für Laktat-Modellierung\"),\n  sidebarLayout(\n    sidebarPanel(\n      width = 3,\n      sliderInput(\"a\", \"a [mmol/l]\", min = 0.0, max = 30.0, value = 15.0, step = 0.01),\n      sliderInput(\"k1\", \"k1 [min^-1]\", min = 0.1, max = 3.5, value = 0.5, step = 0.001),\n      sliderInput(\"k2\", \"k2 [min^-1]\", min = 0.020, max = 0.200, value = 0.10, step = 0.001),\n      sliderInput(\"BLC0\", \"BLC0 [mmol/l]\", min = 0.0, max = 5.0, value = 1.0, step = 0.01),\n      actionButton(\"optimize\", \"Anpassen: nlsLM\"),\n      fileInput(\"file_upload\", \"CSV-Datei hochladen\", accept = \".csv\")\n    ),\n    mainPanel(\n      plotlyOutput(\"plot\")\n    )\n  )\n)\n\n# Server-Logik\nserver &lt;- function(input, output, session) {\n  \n  # Reaktiver Wert für hochgeladene Daten\n  uploaded_data &lt;- reactiveVal(NULL)\n  \n  # Beobachter für CSV-Upload\n  observeEvent(input$file_upload, {\n    req(input$file_upload)\n    df &lt;- read.csv(input$file_upload$datapath)\n    \n    if (\"t_min\" %in% names(df) && \"BLC_t\" %in% names(df)) {\n      if (df$t_min[1] != 0.0) {\n        df$t_min &lt;- df$t_min - df$t_min[1]\n      }\n      \n      uploaded_data(df)\n    } else {\n      showModal(modalDialog(\n        title = \"Ungültige CSV\",\n        \"Die CSV-Datei muss 't_min' und 'BLC_t' als Spaltennamen enthalten.\",\n        easyClose = TRUE,\n        footer = NULL\n      ))\n    }\n  })\n  \n  observeEvent(input$optimize, {\n    data &lt;- if (is.null(uploaded_data())) {\n      data.frame(t_min = t_min, BLC_t = BLC_t)\n    } else {\n      uploaded_data()\n    }\n    \n    # Setze BLC0 Grenzen basierend auf dem ersten BLC_t Wert\n    BLC0_lower &lt;- max(0, data$BLC_t[1] * 0.9)\n    BLC0_upper &lt;- min(5, data$BLC_t[1] * 1.1)\n    \n    best_fit &lt;- NULL\n    best_rss &lt;- Inf\n    \n    withProgress(message = 'Fitting in progress', value = 0, {\n      for (i in 1:100) {\n        # Randomisierte Startwerte\n        a_start &lt;- runif(1, 0, 30)\n        k1_start &lt;- runif(1, 0.1, 3.5)\n        k2_start &lt;- runif(1, 0.020, 0.200)\n        BLC0_start &lt;- runif(1, BLC0_lower, BLC0_upper)\n        \n        start_values &lt;- list(a = a_start, k1 = k1_start, k2 = k2_start, BLC0 = BLC0_start)\n        \n        model_equation &lt;- BLC_t ~ BLC0 + (a * k1 / (k2 - k1)) * (exp(-k1 * t_min) - exp(-k2 * t_min))\n        \n        fit &lt;- try(nlsLM(model_equation,\n                         data = data,\n                         start = start_values,\n                         lower = c(a = 0.0, k1 = 0.1, k2 = 0.020, BLC0 = BLC0_lower),\n                         upper = c(a = 30.0, k1 = 3.5, k2 = 0.200, BLC0 = BLC0_upper),\n                         control = nls.control(maxiter = 1024)), silent = TRUE)\n        \n        if (!inherits(fit, \"try-error\")) {\n          rss &lt;- sum(residuals(fit)^2)\n          if (rss &lt; best_rss) {\n            best_rss &lt;- rss\n            best_fit &lt;- fit\n          }\n        }\n        \n        incProgress(1/100, detail = paste(\"Iteration\", i))\n      }\n    })\n    \n    if (!is.null(best_fit)) {\n      params &lt;- as.list(coef(best_fit))\n      updateSliderInput(session, \"a\", value = params$a)\n      updateSliderInput(session, \"k1\", value = params$k1)\n      updateSliderInput(session, \"k2\", value = params$k2)\n      updateSliderInput(session, \"BLC0\", value = params$BLC0)\n      \n      showNotification(\"Fitting completed successfully!\", type = \"message\")\n    } else {\n      showModal(modalDialog(\n        title = \"nlsLM fehlgeschlagen\",\n        \"Die nicht-lineare Regression mit dem Levenberg-Marquardt-Algorithmus konnte nicht erfolgreich durchgeführt werden.\",\n        easyClose = TRUE,\n        footer = NULL\n      ))\n    }\n  })\n  \n  output$plot &lt;- renderPlotly({\n    a &lt;- input$a\n    k1 &lt;- input$k1\n    k2 &lt;- input$k2\n    BLC0 &lt;- input$BLC0\n    \n    data &lt;- if (is.null(uploaded_data())) {\n      data.frame(t_min = t_min, BLC_t = BLC_t)\n    } else {\n      uploaded_data()\n    }\n    \n    max_x &lt;- max(data$t_min) * 1.66\n    \n    t_min_modell &lt;- seq(0, max_x, length.out = 1000)\n    BLC_t_modell &lt;- bateman_function(t_min_modell, a, k1, k2, BLC0)\n    invasion_modell &lt;- invasion_function(t_min_modell, a, k1, BLC0)\n    elimination_modell &lt;- elimination_function(t_min_modell, a, k2, BLC0)\n    \n    max_y &lt;- max(max(BLC_t_modell) * 1.2, max(data$BLC_t) * 1.2, max(invasion_modell) * 1.2, max(elimination_modell) * 1.2)\n    \n    # Berechne tmax und Lamax\n    tmax &lt;- log(k1/k2) / (k1 - k2)\n    Lamax &lt;- bateman_function(tmax, a, k1, k2, BLC0)\n    \n    # Erstelle Gleichungstext\n    eq_text &lt;- sprintf(\"[La]&lt;sub&gt;b(t)&lt;/sub&gt; = %.2f + (%.2f * %.3f / (%.3f - %.3f)) * (e&lt;sup&gt;-%.3f*t&lt;/sup&gt; - e&lt;sup&gt;-%.3f*t&lt;/sup&gt;)\", \n                       BLC0, a, k1, k2, k1, k1, k2)\n    \n    # Berechne R²\n    BLC_t_modell_at_data &lt;- bateman_function(data$t_min, a, k1, k2, BLC0)\n    ss_res &lt;- sum((data$BLC_t - BLC_t_modell_at_data)^2)\n    ss_tot &lt;- sum((data$BLC_t - mean(data$BLC_t))^2)\n    r_squared &lt;- 1 - (ss_res / ss_tot)\n    \n    # Plotly-Plot\n    p &lt;- plot_ly() %&gt;%\n      add_trace(x = t_min_modell, y = BLC_t_modell, type = 'scatter', mode = 'lines', \n                name = 'Bateman-Funktion', line = list(color = '#EF5350')) %&gt;%\n      add_trace(x = t_min_modell, y = invasion_modell, type = 'scatter', mode = 'lines', \n                name = 'Invasion', line = list(color = \"#9C85C0\", width = 2, dash = '8 5'),\n                opacity = 0.65) %&gt;%\n      add_trace(x = t_min_modell, y = elimination_modell, type = 'scatter', mode = 'lines', \n                name = 'Elimination', line = list(color = '#2683C6', width = 2, dash = '8 5'),\n                opacity = 0.65) %&gt;%\n      add_trace(x = data$t_min, y = data$BLC_t, type = 'scatter', mode = 'markers', \n                name = 'Gemessene BLC-Werte', marker = list(color = \"#42BA97\", size = 9, symbol = 'x')) %&gt;%\n      add_segments(x = tmax, xend = tmax, y = 0, yend = max_y, \n                   line = list(color = 'darkgrey', width = 1, dash = 'dash'), \n                   showlegend = FALSE, opacity = 0.5) %&gt;%\n      add_segments(x = 0, xend = max_x, y = Lamax, yend = Lamax, \n                   line = list(color = 'darkgrey', width = 1, dash = 'dash'), \n                   showlegend = FALSE, opacity = 0.5) %&gt;%\n      layout(title = \"Bateman-Funktion für Laktat-Modellierung\",\n             margin = list(t = 40),\n             xaxis = list(title = \"Zeit [min]\", range = c(0, max_x)),\n             yaxis = list(title = \"Laktat [mmol/l]\", range = c(0, max_y)),\n             annotations = list(\n               list(\n                 x = max_x * 0.5, \n                 y = max_y * 0.95,\n                 text = eq_text,\n                 showarrow = FALSE,\n                 xanchor = 'left',\n                 yanchor = 'bottom',\n                 font = list(\n                   size = 12,\n                   color = \"black\"\n                 )\n               ),\n               list(\n                 x = max_x * 0.5,\n                 y = max_y * 0.90,\n                 text = sprintf(\"R²: %.4f\", r_squared),\n                 showarrow = FALSE,\n                 xanchor = 'left',\n                 yanchor = 'bottom',\n                 font = list(\n                   size = 12,\n                   color = \"black\"\n                 )\n               ),\n               list(\n                 x = max_x * 0.5,\n                 y = max_y * 0.85,\n                 text = sprintf(\"BLC&lt;sub&gt;max&lt;/sub&gt;: %.2f mmol/l, TBLC&lt;sub&gt;max&lt;/sub&gt;: %.2f min\", Lamax, tmax),\n                 showarrow = FALSE,\n                 xanchor = 'left',\n                 yanchor = 'bottom',\n                 font = list(\n                   size = 12,\n                   color = \"black\"\n                 )\n               )\n             ))\n    \n    p\n  })\n}\n\n# Starte die App\nshinyApp(ui = ui, server = server)\n\n\n3 Blutlaktat-Kompartmentmodell-Modellfunktion (nach Freund et al. 1986): Während und nach dem Belastungszeitraum\n#| standalone: true\n#| viewerHeight: 900\nlibrary(shiny)\nlibrary(plotly)\nlibrary(minpack.lm)\n\n# Definiere Daten\nt_min &lt;- c(0.4, 3.3, 6.5, 8.4, 10.2, 12.5, 14.9, 16.7, 19.3)\nBLC_t &lt;- c(0.82, 4.53, 6.97, 7.52, 7.73, 7.28, 6.37, 5.41, 4.71)\n\n# Normalisiere t_min, wenn der kleinste Wert größer als 0.0 ist\nif (min(t_min) &gt; 0.0) {\n  t_min &lt;- t_min - min(t_min)\n}\n\n# Freund et al. Kompartmentmodell-Funktion\nfreund_model &lt;- function(t, A1, A2, gamma1, gamma2, La0) {\n  La0 + A1 * (1 - exp(-gamma1 * t)) + A2 * (1 - exp(-gamma2 * t))\n}\n\n# Berechne tmax und Lamax\ncalculate_tmax_lamax &lt;- function(A1, A2, gamma1, gamma2, La0) {\n  f &lt;- function(t) freund_model(t, A1, A2, gamma1, gamma2, La0)\n  tmax &lt;- optimize(f, c(0, 100), maximum = TRUE)$maximum\n  Lamax &lt;- f(tmax)\n  list(tmax = tmax, Lamax = Lamax)\n}\n\n# Benutzeroberfläche (UI)\nui &lt;- fluidPage(\n  titlePanel(\"Kompartmentmodell für Laktat-Modellierung\"),\n  sidebarLayout(\n    sidebarPanel(\n      width = 3,\n      sliderInput(\"A1\", \"A1 [mmol/l]\", min = 0.0, max = 100.0, value = 20.0, step = 0.1),\n      sliderInput(\"A2\", \"A2 [mmol/l]\", min = -100.0, max = 0.0, value = -20.0, step = 0.1),\n      sliderInput(\"gamma1\", \"γ1 [min^-1]\", min = 0.05, max = 2.0, value = 0.1, step = 0.001),\n      sliderInput(\"gamma2\", \"γ2 [min^-1]\", min = 0.01, max = 0.5, value = 0.05, step = 0.001),\n      sliderInput(\"La0\", \"La0 [mmol/l]\", min = 0.0, max = 5.0, value = 1.0, step = 0.01),\n      actionButton(\"optimize\", \"Anpassen: nlsLM\"),\n      fileInput(\"file_upload\", \"CSV-Datei hochladen\", accept = \".csv\")\n    ),\n    mainPanel(\n      plotlyOutput(\"plot\")\n    )\n  )\n)\n\n# Server-Logik\nserver &lt;- function(input, output, session) {\n  \n  # Reaktiver Wert für hochgeladene Daten\n  uploaded_data &lt;- reactiveVal(NULL)\n  \n  # Beobachter für CSV-Upload\n  observeEvent(input$file_upload, {\n    req(input$file_upload)\n    df &lt;- read.csv(input$file_upload$datapath)\n    \n    if (\"t_min\" %in% names(df) && \"BLC_t\" %in% names(df)) {\n      if (df$t_min[1] != 0.0) {\n        df$t_min &lt;- df$t_min - df$t_min[1]\n      }\n      \n      uploaded_data(df)\n    } else {\n      showModal(modalDialog(\n        title = \"Ungültige CSV\",\n        \"Die CSV-Datei muss 't_min' und 'BLC_t' als Spaltennamen enthalten.\",\n        easyClose = TRUE,\n        footer = NULL\n      ))\n    }\n  })\n  \n  observeEvent(input$optimize, {\n    data &lt;- if (is.null(uploaded_data())) {\n      data.frame(t_min = t_min, BLC_t = BLC_t)\n    } else {\n      uploaded_data()\n    }\n    \n    # Setze La0 Grenzen basierend auf dem ersten BLC_t Wert\n    La0_lower &lt;- max(0, data$BLC_t[1] * 0.9)\n    La0_upper &lt;- min(5, data$BLC_t[1] * 1.1)\n    \n    best_fit &lt;- NULL\n    best_rss &lt;- Inf\n    \n    withProgress(message = 'Fitting in progress', value = 0, {\n      for (i in 1:100) {\n        # Randomisierte Startwerte\n        A1_start &lt;- runif(1, 0, 100)\n        A2_start &lt;- runif(1, -100, 0)\n        gamma1_start &lt;- runif(1, 0.05, 2)\n        gamma2_start &lt;- runif(1, 0.01, 0.5)\n        La0_start &lt;- runif(1, La0_lower, La0_upper)\n        \n        start_values &lt;- list(A1 = A1_start, A2 = A2_start, gamma1 = gamma1_start, gamma2 = gamma2_start, La0 = La0_start)\n        \n        model_equation &lt;- BLC_t ~ La0 + A1 * (1 - exp(-gamma1 * t_min)) + A2 * (1 - exp(-gamma2 * t_min))\n        \n        fit &lt;- try(nlsLM(model_equation,\n                         data = data,\n                         start = start_values,\n                         lower = c(A1 = 0.0, A2 = -100.0, gamma1 = 0.05, gamma2 = 0.01, La0 = La0_lower),\n                         upper = c(A1 = 100.0, A2 = 0.0, gamma1 = 2.0, gamma2 = 0.5, La0 = La0_upper),\n                         control = nls.control(maxiter = 1024)), silent = TRUE)\n        \n        if (!inherits(fit, \"try-error\")) {\n          rss &lt;- sum(residuals(fit)^2)\n          if (rss &lt; best_rss) {\n            best_rss &lt;- rss\n            best_fit &lt;- fit\n          }\n        }\n        \n        incProgress(1/100, detail = paste(\"Iteration\", i))\n      }\n    })\n    \n    if (!is.null(best_fit)) {\n      params &lt;- as.list(coef(best_fit))\n      updateSliderInput(session, \"A1\", value = params$A1)\n      updateSliderInput(session, \"A2\", value = params$A2)\n      updateSliderInput(session, \"gamma1\", value = params$gamma1)\n      updateSliderInput(session, \"gamma2\", value = params$gamma2)\n      updateSliderInput(session, \"La0\", value = params$La0)\n      \n      showNotification(\"Fitting completed successfully!\", type = \"message\")\n    } else {\n      showModal(modalDialog(\n        title = \"nlsLM fehlgeschlagen\",\n        \"Die nicht-lineare Regression mit dem Levenberg-Marquardt-Algorithmus konnte nicht erfolgreich durchgeführt werden.\",\n        easyClose = TRUE,\n        footer = NULL\n      ))\n    }\n  })\n  \n  output$plot &lt;- renderPlotly({\n    A1 &lt;- input$A1\n    A2 &lt;- input$A2\n    gamma1 &lt;- input$gamma1\n    gamma2 &lt;- input$gamma2\n    La0 &lt;- input$La0\n    \n    data &lt;- if (is.null(uploaded_data())) {\n      data.frame(t_min = t_min, BLC_t = BLC_t)\n    } else {\n      uploaded_data()\n    }\n    \n    max_x &lt;- max(data$t_min) * 1.66\n    \n    t_min_modell &lt;- seq(0, max_x, length.out = 1000)\n    BLC_t_modell &lt;- freund_model(t_min_modell, A1, A2, gamma1, gamma2, La0)\n    \n    max_y &lt;- max(max(BLC_t_modell) * 1.2, max(data$BLC_t) * 1.2)\n    \n    # Berechne tmax und Lamax\n    results &lt;- calculate_tmax_lamax(A1, A2, gamma1, gamma2, La0)\n    tmax &lt;- results$tmax\n    Lamax &lt;- results$Lamax\n    \n    # Erstelle Gleichungstext\n    eq_text &lt;- sprintf(\"[La]&lt;sub&gt;b(t)&lt;/sub&gt; = %.2f + %.1f * (1 - e&lt;sup&gt;-%.3f*t&lt;/sup&gt;) + %.1f * (1 - e&lt;sup&gt;-%.3f*t&lt;/sup&gt;)\", \n                       La0, A1, gamma1, A2, gamma2)\n    \n    # Berechne R²\n    BLC_t_modell_at_data &lt;- freund_model(data$t_min, A1, A2, gamma1, gamma2, La0)\n    ss_res &lt;- sum((data$BLC_t - BLC_t_modell_at_data)^2)\n    ss_tot &lt;- sum((data$BLC_t - mean(data$BLC_t))^2)\n    r_squared &lt;- 1 - (ss_res / ss_tot)\n    \n    # Plotly-Plot\n    p &lt;- plot_ly() %&gt;%\n      add_trace(x = t_min_modell, y = BLC_t_modell, type = 'scatter', mode = 'lines', \n                name = 'Modellgleichung', line = list(color = '#EF5350')) %&gt;%\n      add_trace(x = data$t_min, y = data$BLC_t, type = 'scatter', mode = 'markers', \n                name = 'Gemessene BLC-Werte', marker = list(color = \"#42BA97\", size = 9, symbol = 'x')) %&gt;%\n      add_segments(x = tmax, xend = tmax, y = 0, yend = max_y, \n                   line = list(color = 'darkgrey', width = 1, dash = 'dash'), \n                   showlegend = FALSE, opacity = 0.5) %&gt;%\n      add_segments(x = 0, xend = max_x, y = Lamax, yend = Lamax, \n                   line = list(color = 'darkgrey', width = 1, dash = 'dash'), \n                   showlegend = FALSE, opacity = 0.5) %&gt;%\n      layout(title = \"Freund et al. Kompartmentmodell für Laktat-Modellierung\",\n             margin = list(t = 40),\n             xaxis = list(title = \"Zeit [min]\", range = c(0, max_x)),\n             yaxis = list(title = \"Laktat [mmol/l]\", range = c(0, max_y)),\n             annotations = list(\n               list(\n                 x = max_x * 0.5, \n                 y = max_y * 0.95,\n                 text = eq_text,\n                 showarrow = FALSE,\n                 xanchor = 'left',\n                 yanchor = 'bottom',\n                 font = list(\n                   size = 12,\n                   color = \"black\"\n                 )\n               ),\n               list(\n                 x = max_x * 0.5,\n                 y = max_y * 0.90,\n                 text = sprintf(\"R²: %.4f\", r_squared),\n                 showarrow = FALSE,\n                 xanchor = 'left',\n                 yanchor = 'bottom',\n                 font = list(\n                   size = 12,\n                   color = \"black\"\n                 )\n               ),\n               list(\n                 x = max_x * 0.5,\n                 y = max_y * 0.85,\n                 text = sprintf(\"BLC&lt;sub&gt;max&lt;/sub&gt;: %.2f mmol/l, TBLC&lt;sub&gt;max&lt;/sub&gt;: %.2f min\", Lamax, tmax),\n                 showarrow = FALSE,\n                 xanchor = 'left',\n                 yanchor = 'bottom',\n                 font = list(\n                   size = 12,\n                   color = \"black\"\n                 )\n               )\n             ))\n    \n    p\n  })\n}\n\n# Starte die App\nshinyApp(ui = ui, server = server)\n\n\n4 Laktat-Leistungs-Beziehung\n#| standalone: true\n#| viewerHeight: 900\nlibrary(shiny)\nlibrary(plotly)\n\n# UI\nui &lt;- fluidPage(\n  titlePanel(\"Laktat-Leistungs-Modell\"),\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"num_rows\", \"Anzahl der Datenpunkte\", 4, min = 1, max = 20),\n      uiOutput(\"input_fields\"),\n      width = 2  \n    ),\n    mainPanel(\n      plotlyOutput(\"plot\"),\n      width = 10  \n    )\n  )\n)\n\n# Server\nserver &lt;- function(input, output, session) {\n  # Initialwerte für die Leistung und ΔBLC\n  initial_values &lt;- list(\n    list(Leistung = 100, DeltaBLC = 0.3),\n    list(Leistung = 200, DeltaBLC = 1.0),\n    list(Leistung = 300, DeltaBLC = 2.8),\n    list(Leistung = 400, DeltaBLC = 8.0)\n  )\n  \n  # Dynamisch Input-Felder erzeugen\n  output$input_fields &lt;- renderUI({\n    num_rows &lt;- input$num_rows\n    \n    lapply(1:num_rows, function(i) {\n      initial_value &lt;- if (i &lt;= length(initial_values)) initial_values[[i]] else list(Leistung = 0, DeltaBLC = 0)\n      tagList(\n        numericInput(paste0(\"leistung_\", i), paste(\"Leistung\", i), value = initial_value$Leistung, step = 10),\n        numericInput(paste0(\"deltaBLC_\", i), paste(\"ΔBLC\", i), value = initial_value$DeltaBLC, step = 0.1)\n      )\n    })\n  })\n  \n  # Reaktive Datenframe basierend auf Eingabewerten\n  input_data &lt;- reactive({\n    num_rows &lt;- input$num_rows\n    if (is.null(num_rows)) return(NULL)\n    \n    data &lt;- data.frame(Leistung = numeric(num_rows), ΔBLC = numeric(num_rows))\n    \n    for (i in 1:num_rows) {\n      leistung_val &lt;- input[[paste0(\"leistung_\", i)]]\n      deltaBLC_val &lt;- input[[paste0(\"deltaBLC_\", i)]]\n      \n      if (is.null(leistung_val) || is.null(deltaBLC_val)) {\n        data$Leistung[i] &lt;- if (i &lt;= length(initial_values)) initial_values[[i]]$Leistung else 0\n        data$ΔBLC[i] &lt;- if (i &lt;= length(initial_values)) initial_values[[i]]$DeltaBLC else 0\n      } else {\n        data$Leistung[i] &lt;- leistung_val\n        data$ΔBLC[i] &lt;- deltaBLC_val\n      }\n    }\n    \n    data\n  })\n  \n  # Initiale Werte setzen\n  observe({\n    for (i in 1:length(initial_values)) {\n      updateNumericInput(session, paste0(\"leistung_\", i), value = initial_values[[i]]$Leistung)\n      updateNumericInput(session, paste0(\"deltaBLC_\", i), value = initial_values[[i]]$DeltaBLC)\n    }\n  })\n  \n  # Modell anpassen und Plot aktualisieren\n  output$plot &lt;- renderPlotly({\n    df_proband &lt;- input_data()\n    \n    if (is.null(df_proband)) return(NULL)\n    \n    # Anpassung des Exponentialmodells\n    model &lt;- nls(ΔBLC ~ a * exp(b * Leistung), data = df_proband, start = list(a = 1, b = 0.01))\n    coef_exponential_model &lt;- coef(model)\n    \n    # Vorhersagen und Sequenz für den Plot\n    x_seq &lt;- seq(min(df_proband$Leistung), max(df_proband$Leistung), length.out = 100)\n    y_pred &lt;- predict(model, newdata = data.frame(Leistung = x_seq))\n    \n    # Plotly-Diagramm\n    plot_ly() %&gt;%\n      add_trace(data = df_proband, x = ~Leistung, y = ~ΔBLC, type = 'scatter', mode = 'markers',\n                name = \"ΔBLC\",\n                marker = list(color = \"#2683C6\", size = 7.0)) %&gt;%\n      add_trace(x = ~x_seq, y = ~y_pred, type = 'scatter', mode = 'lines', \n                name = 'Laktat-Modellfunktion', \n                line = list(color = '#62A39F', width = 3)) %&gt;%\n      add_annotations(text = sprintf(\"ΔBLC = %.5f \\u00B7 e&lt;sup&gt;%.5f \\u00B7 Leistung&lt;/sup&gt;\", \n                                     coef_exponential_model['a'], coef_exponential_model['b']),\n                      x = min(df_proband$Leistung), y = max(y_pred), showarrow = FALSE,\n                      xanchor = 'left', yanchor = 'bottom',\n                      font = list(family = \"Arial, sans-serif\", size = 12, color = \"black\")) %&gt;%\n      layout(\n        title = \"Laktat-Leistungs-Modell\",\n        margin = list(t = 40),\n        xaxis = list(title = \"Leistung [Watt]\"),\n        yaxis = list(title = \"ΔBLC [mmol \\u00B7 l&lt;sup&gt;-1&lt;/sup&gt;]\")\n      )\n  })\n}\n\n# App starten\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Laktat-Modellfunktionen"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Demo: Shinylive-Apps & webR",
    "section": "",
    "text": "In den folgenden Abschnitten werden Möglichkeiten zur interaktiven Gestaltung der Masterarbeit mittels verschiedener Shiny-Apps und webR-Anwendungen vorgestellt. Dazu zählt eine interaktive exponentielle V̇O₂-Modellfunktion, die den Anstieg des Sauerstoffvolumenstroms zu Beginn einer Belastung modelliert. Zudem wird eine interaktive bi-exponentielle EPOC-Modellfunktion dargestellt. Die unterschiedlichen Parameter der Modellfunktionen können mittels Schiebereglern angepasst werden. Darüber hinaus ist es möglich, eigene Daten in Form einer CSV-Datei hochzuladen. Zusätzlich ist eine interaktive Laktat-Leistungs-Beziehung in einer Shiny-App integriert, bei der die Datenpunkte ebenfalls interaktiv verändert werden können.\nDie automatische Anpassung mittels nichtlinearer Regression ist derzeit noch nicht funktionsfähig.\nIn der finalen Masterarbeit sollen weitere interaktive Shiny-Apps nach diesem Vorbild implementiert werden, um Berechnungen anschaulich darzustellen und die Nutzung sowie Berechnung verschiedener Parameter mit eigenen Daten zu ermöglichen.",
    "crumbs": [
      "Demo: Shinylive-Apps & webR"
    ]
  }
]